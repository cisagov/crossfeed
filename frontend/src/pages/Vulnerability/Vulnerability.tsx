import React, { useCallback, useEffect, useState } from 'react';
import { Link, useParams, useHistory } from 'react-router-dom';
import { differenceInCalendarDays, format, parseISO } from 'date-fns';
import { ChevronLeft, OpenInNew } from '@mui/icons-material';
import {
  AppBar,
  Box,
  Button,
  Grid,
  IconButton,
  Link as LinkMui,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Toolbar,
  Typography
} from '@mui/material';
import { getSeverityColor, getCVSSColor } from 'pages/Risk/utils';
import { useAuthContext } from 'context';
import {
  Cve as CveType,
  Cpe as ProductInfoType,
  Vulnerability as VulnerabilityType
} from 'types';

const formatDate = (date: string | null) => {
  if (date) {
    return format(parseISO(date), 'MM/dd/yyyy');
  }
  return 'Date not found';
};

interface GroupedByVendor {
  [key: string]: ProductInfoType[];
}

interface Product {
  cpe?: string | null;
  name: string;
  version?: string;
  tags: string[];
}

interface Service {
  id: string | number;
  createdAt?: string | null;
  updatedAt?: string | null;
  serviceSource?: string | null;
  port: number;
  service: string;
  lastSeen?: string | null;
  banner?: string | null;
  products: Product[];
  censysMetadata?: Record<string, any> | null;
  censysIpv4Results?: Record<string, any> | null;
  intrigueIdentResults?: Record<string, any> | null;
  shodanResult?: Record<string, any> | null;
  wappalyzerResults?:
    | {
        version?: string | null;
        technology?: {
          cpe?: string | null;
        } | null;
      }[]
    | null;
}

interface WebInfoItem {
  label?: string | null;
  value?: string;
}

export const Vulnerability: React.FC = () => {
  const { vulnerabilityId } = useParams<any>();
  const { apiGet } = useAuthContext();
  const [vulnerability, setVulnerability] = useState<VulnerabilityType>();
  const [cve, setCve] = useState<CveType>();
  const history = useHistory();

  const getCve = useCallback(
    (cveName: string | null) => {
      return apiGet(`/cves/name/${cveName}`).then(
        (result) => {
          setCve(result);
          return true;
        },
        (e) => {
          console.error(e);
          return false;
        }
      );
    }, // eslint-disable-next-line react-hooks/exhaustive-deps
    [apiGet]
  );

  const fetchVulnerability = useCallback(async () => {
    try {
      const result = await apiGet<VulnerabilityType>(
        `/vulnerabilities/${vulnerabilityId}`
      );
      setVulnerability(result);
      getCve(result.cve);
    } catch (e) {
      console.error(e);
    }
  }, [vulnerabilityId, apiGet, getCve]);

  useEffect(() => {
    fetchVulnerability();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [fetchVulnerability]);

  if (!vulnerability) return <>No Vulnerabilities</>;

  const groupedByVendor: GroupedByVendor = (cve?.cpes ?? []).reduce(
    (acc: GroupedByVendor, current: ProductInfoType) => {
      const { vendor, ...rest } = current;
      // If the vendor exists, push the current object to its array
      if (acc[vendor]) {
        acc[vendor].push(rest);
      } else {
        // Create a new array with the current object
        acc[vendor] = [rest];
      }
      return acc;
    },
    {} as GroupedByVendor
  );

  const generateWebInfo = (service: Service): WebInfoItem[] => {
    const categoriesToProducts: Record<string, Set<string>> = {};
    for (const product of service.products) {
      const version = product.version ? ` ${product.version}` : '';
      const value = product.name + version;
      const name =
        product.tags && product.tags.length > 0 ? product.tags[0] : 'Misc';
      if (!categoriesToProducts[name]) {
        categoriesToProducts[name] = new Set();
      }
      categoriesToProducts[name].add(value);
    }
    return Object.entries(categoriesToProducts).reduce(
      (acc, [name, value]) => [
        ...acc,
        {
          label: name,
          value: Array.from(value).join(', ')
        }
      ],
      [] as any
    );
  };

  const references = vulnerability.references.map((ref) => ref);
  if (vulnerability.cve)
    references.unshift({
      name: 'NIST National Vulnerability Database',
      url: `https://nvd.nist.gov/vuln/detail/${vulnerability.cve}`,
      source: '',
      tags: []
    });

  function cweUrl(cwe: string | null): string {
    // Check if the input starts with "CWE-" and extract the ID part
    if (cwe && cwe.startsWith('CWE-')) {
      const id = cwe.replace('CWE-', '');
      return `https://cwe.mitre.org/data/definitions/${id}`;
    }
    return 'https://cwe.mitre.org/data';
  }
  const vulnState =
    vulnerability.state[0].toUpperCase() +
    vulnerability.state.slice(1) +
    ' (' +
    vulnerability.substate[0].toUpperCase() +
    vulnerability.substate.slice(1) +
    ')';
  const product =
    vulnerability.service &&
    vulnerability.service.products.find(
      (product) =>
        vulnerability.cpe &&
        product.cpe &&
        vulnerability.cpe.includes(product.cpe)
    );
  // Calculates the total number of days a vulnerability has been open
  let daysOpen = 0;
  let lastOpenDate = vulnerability.createdAt;
  let lastState = 'open';
  vulnerability.actions.reverse();
  for (const action of vulnerability.actions) {
    if (action.state === 'closed' && lastState === 'open') {
      daysOpen += differenceInCalendarDays(
        parseISO(action.date),
        parseISO(lastOpenDate)
      );
      lastState = 'closed';
    } else if (action.state === 'open' && lastState === 'closed') {
      lastOpenDate = action.date;
      lastState = 'open';
    }
  }

  const OverviewSection = () => {
    return (
      <Box sx={{ flexGrow: 1 }}>
        <AppBar position="static">
          <Toolbar>
            <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
              {vulnerability.domain.name}
            </Typography>
            <IconButton
              size="large"
              edge="start"
              color="inherit"
              aria-label="menu"
              href={`/inventory/domain/${vulnerability.domain.id}`}
            >
              <OpenInNew />
            </IconButton>
          </Toolbar>
        </AppBar>
        <Box sx={{ bgcolor: 'white' }}>
          <Grid container>
            <Grid item xs={12} sm={5} minWidth="200px" sx={{ m: '15px' }}>
              <Typography variant="h6">Overview</Typography>
              <Typography variant="body1">
                IP: {vulnerability.domain.ip}
                <br />
                First Seen:{' '}
                {differenceInCalendarDays(
                  Date.now(),
                  parseISO(vulnerability.domain.createdAt)
                )}{' '}
                days ago
                <br />
                Last Seen:{' '}
                {differenceInCalendarDays(
                  Date.now(),
                  parseISO(vulnerability.domain.updatedAt)
                )}{' '}
                days ago
                <br />
                Country:{' '}
                {vulnerability.domain.country
                  ? vulnerability.domain.country
                  : 'Not found'}
                <br />
                Organization: {vulnerability.domain.organization.name}
                <br />
              </Typography>
              <br />
              {generateWebInfo(vulnerability.service).length > 0 && (
                <>
                  <Typography variant="h6">
                    Installed (Known) Products
                  </Typography>
                  {generateWebInfo(vulnerability.service).map(
                    ({ label, value }) => (
                      <Typography variant="body1" key={label}>
                        {label}: {value}
                      </Typography>
                    )
                  )}
                </>
              )}
            </Grid>
            <Grid item xs={12} sm={6} sx={{ m: '15px' }}>
              <Typography variant="h6" mb={1}>
                Provenance
              </Typography>
              <Typography variant="body1" component="div">
                <Box sx={{ lineHeight: 2 }}>
                  <b>Root Domain: </b> {vulnerability.domain.fromRootDomain}
                  <br />
                  <b>Subdomain:</b> {vulnerability.domain.name} (
                  {vulnerability.domain.subdomainSource})<br />
                  <b>Service/Port:</b>{' '}
                  {vulnerability.service.service
                    ? vulnerability.service.service
                    : vulnerability.service.port}{' '}
                  ({vulnerability.service.serviceSource})<br />
                  <b>Product:</b> {vulnerability.cpe}
                  <br />
                  <b>Vulnerability:</b> {vulnerability.title} (
                  {vulnerability.source})
                </Box>
              </Typography>
            </Grid>
          </Grid>
        </Box>
      </Box>
    );
  };
  const CVEHighlightSection = () => {
    return (
      <Grid item xs={10} xl={8} mt={5}>
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>
                  <LinkMui
                    href={references[0].url}
                    target="_blank"
                    rel="noopener"
                  >
                    {vulnerability.cve} <OpenInNew fontSize="small" />
                  </LinkMui>
                </TableCell>
                <TableCell>
                  <Box
                    component="span"
                    sx={{
                      borderBottom: `6px solid ${getSeverityColor({
                        id: vulnerability.severity ?? ''
                      })}`,
                      width: '80px'
                    }}
                  >
                    {vulnerability.severity}
                  </Box>
                </TableCell>
                <TableCell>{vulnerability.isKev ? 'Yes' : 'No'}</TableCell>
                <TableCell>
                  <Link to={`/inventory/domain/${vulnerability.domain.id}`}>
                    {vulnerability.domain.name}
                  </Link>
                </TableCell>
                <TableCell>
                  {product
                    ? product.name +
                      (product.version ? ' ' + product.version : '')
                    : vulnerability.cpe}
                </TableCell>
                <TableCell>
                  {lastState === 'open'
                    ? (daysOpen += differenceInCalendarDays(
                        new Date(),
                        parseISO(lastOpenDate)
                      ))
                    : daysOpen}
                </TableCell>
                <TableCell>{vulnState}</TableCell>
              </TableRow>
            </TableHead>
          </Table>
        </TableContainer>
      </Grid>
    );
  };
  const CVEReferencesCWESection = () => {
    return (
      <Grid item sm={12} lg={7} p={2} sx={{ minWidth: 200 }}>
        <Typography variant="h6" mb={2}>
          {vulnerability.cve}
        </Typography>
        <Button
          size="small"
          variant="contained"
          sx={{ borderRadius: 28, textTransform: 'none' }}
          onClick={() => console.log()}
        >
          {vulnState}
        </Button>
        <Typography fontWeight={500} mt={2}>
          Description
        </Typography>
        <Typography variant="caption">{vulnerability.description}</Typography>
        <Typography fontWeight="bold" mt={2} mb={2}>
          References
        </Typography>
        <TableContainer component={Paper}>
          <Table size="small" aria-label="a dense table">
            <TableHead>
              <TableRow
                sx={{
                  '& th': { backgroundColor: '#07648D', color: 'white' }
                }}
              >
                <TableCell>Hyperlink</TableCell>
                <TableCell>Resource</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {vulnerability.references.map((row) => (
                <TableRow key={row.name}>
                  <TableCell>
                    <LinkMui href={row.url}>{row.url}</LinkMui>
                  </TableCell>
                  <TableCell>{row.source}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
        <TableContainer component={Paper} sx={{ mt: 3, maxWidth: 500 }}>
          <Table size="small">
            <TableHead>
              <TableRow
                sx={{
                  '& th': { backgroundColor: '#07648D', color: 'white' }
                }}
              >
                <TableCell>CWE-ID</TableCell>
                <TableCell>Source</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              <TableRow>
                <TableCell>
                  <LinkMui href={cweUrl(vulnerability.cwe)}>
                    {vulnerability.cwe}
                  </LinkMui>
                </TableCell>
                <TableCell>{vulnerability.source}</TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </TableContainer>
      </Grid>
    );
  };
  const SeverityAffectedHistorySection = () => {
    return (
      <Grid item xs={12} lg={5} p={2}>
        <Box p={2}>
          <Typography fontWeight="bold" pb={2}>
            CVSS 3.x Severity & Metrics
          </Typography>
          <Grid container spacing={1}>
            <Grid item xs={12} sm={3}>
              <Box
                component="img"
                sx={{ height: 25, width: 30 }}
                alt="NVD"
                src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ5dvAqUgpcwQXcfmDxrMry2Z6mj8FAckqcjpbHupW7ReLf_DuyhR8_jIYcr8hs38yDorw&usqp=CAU"
              />
              <Typography
                display="inline"
                variant="subtitle2"
                sx={{ verticalAlign: 'top' }}
              >
                NIST:{' '}
              </Typography>
              <Typography
                display="inline"
                variant="subtitle2"
                fontWeight="regular"
                sx={{ verticalAlign: 'top' }}
              >
                {cve?.cvssV3Source != null
                  ? cve?.cvssV3Source.split('@')[0].toUpperCase()
                  : null}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={3}>
              <Typography display="inline" variant="subtitle2">
                Base Score:{' '}
              </Typography>
              <Typography
                display="inline"
                variant="subtitle2"
                sx={{
                  backgroundColor: getCVSSColor(Number(cve?.cvssV3BaseScore))[0]
                }}
              >
                &nbsp;&nbsp;{cve?.cvssV3BaseScore}&nbsp;
                {getCVSSColor(Number(cve?.cvssV3BaseScore))[1]}&nbsp;&nbsp;
              </Typography>
            </Grid>
            <Grid item xs={12} sm={6}>
              <Typography
                display="inline"
                variant="caption"
                fontWeight="regular"
                sx={{ overflowWrap: 'break-word' }}
              >
                <b>Vector: </b>
              </Typography>
              <Typography
                display="inline"
                variant="caption"
                fontWeight="regular"
                sx={{ overflowWrap: 'break-word' }}
              >
                {cve?.cvssV3VectorString}
              </Typography>
            </Grid>
          </Grid>
          <Typography fontWeight="bold" py={2}>
            CVSS 2.0 Severity & Metrics
          </Typography>
          <Grid container spacing={2}>
            <Grid item xs={12} sm={3}>
              <Box
                component="img"
                sx={{ height: 25, width: 30 }}
                alt="NVD"
                src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ5dvAqUgpcwQXcfmDxrMry2Z6mj8FAckqcjpbHupW7ReLf_DuyhR8_jIYcr8hs38yDorw&usqp=CAU"
              />
              <Typography
                display="inline"
                variant="subtitle2"
                sx={{ verticalAlign: 'top' }}
              >
                NIST:{' '}
              </Typography>
              <Typography
                display="inline"
                variant="subtitle2"
                fontWeight="regular"
                sx={{ verticalAlign: 'top' }}
              >
                {cve?.cvssV2Source != null
                  ? cve?.cvssV2Source.split('@')[0].toUpperCase()
                  : null}
              </Typography>
            </Grid>
            <Grid item xs={12} sm={3}>
              <Typography display="inline" variant="subtitle2">
                Base Score:{' '}
              </Typography>
              <Typography
                display="inline"
                variant="subtitle2"
                sx={{
                  backgroundColor: getCVSSColor(Number(cve?.cvssV2BaseScore))[0]
                }}
              >
                &nbsp;&nbsp;{cve?.cvssV2BaseScore}&nbsp;
                {getCVSSColor(Number(cve?.cvssV2BaseScore))[1]}&nbsp;&nbsp;
              </Typography>
            </Grid>
            <Grid item xs={12} sm={6}>
              <Typography display="inline" variant="subtitle2">
                Vector:{' '}
              </Typography>
              <Typography
                display="inline"
                variant="caption"
                fontWeight="regular"
              >
                {cve?.cvssV2VectorString}
              </Typography>
            </Grid>
          </Grid>
        </Box>
        <Paper elevation={2} sx={{ mt: 3, p: 2 }}>
          <Typography variant="h6">Products Affected</Typography>
          {Object.entries(groupedByVendor).map(([vendor, values]) => (
            <div key={vendor}>
              <Typography variant="subtitle2">{vendor}</Typography>
              <Typography variant="body2" component="div">
                <ul>
                  {values.map((value, index) => (
                    <li key={index}>{value.name}</li>
                  ))}
                </ul>
              </Typography>
            </div>
          ))}
        </Paper>
        <Paper elevation={2} sx={{ mt: 3, p: 2 }}>
          <Typography variant="h6">Vulnerability Detection History</Typography>
          <Typography fontWeight={500} variant="body1">
            First Detected
          </Typography>
          <Typography display="inline" variant="body2">
            Vulnerability Opened: {formatDate(vulnerability.createdAt)}
          </Typography>
          <Typography fontWeight={500} variant="body1">
            Last Detected
          </Typography>
          <Typography display="inline" variant="body2">
            State automatically changed to {vulnState.toLowerCase()}:{' '}
            {formatDate(vulnerability.lastSeen)}
          </Typography>
        </Paper>
      </Grid>
    );
  };
  // TODO: Discuss options to add manual notes. https://github.com/cisagov/crossfeed/issues/2519
  // const NotesSection = () => {
  //   <Grid item xs={12} p={2}>
  //     <Paper variant="outlined" sx={{ p: 2, borderColor: 'gray' }}>
  //       <Typography variant="h6">Team Notes</Typography>
  //       <LinkMui href="#">Add new note</LinkMui>
  //     </Paper>
  //   </Grid>;
  // };
  return (
    <React.Fragment>
      <Box ml={2} mt={2}>
        <Link to="# " onClick={() => history.goBack()}>
          <ChevronLeft
            sx={{
              height: '100%',
              verticalAlign: 'middle',
              marginTop: '-2px'
            }}
          ></ChevronLeft>
          Go back
        </Link>
      </Box>
      <Grid container>
        <Grid item xs={1} xl={2} />
        <Grid item xs={10} xl={8}>
          <Typography variant="h4" gutterBottom mt={2}>
            Vulnerability Details
          </Typography>
          <OverviewSection />
        </Grid>
        <Grid item xs={1} xl={2} />
        <Grid item xs={1} xl={2} />
        <CVEHighlightSection />
        <Grid item xs={1} xl={2} />
        <Grid item xs={1} xl={2} />
        <Grid item xs={10} xl={8} mt={5}>
          <Grid container sx={{ backgroundColor: 'white' }}>
            <CVEReferencesCWESection />
            <SeverityAffectedHistorySection />
            {/* <NotesSection /> */}
          </Grid>
        </Grid>
        <Grid item xs={12} sx={{ height: '400px' }} />
      </Grid>
    </React.Fragment>
  );
};
