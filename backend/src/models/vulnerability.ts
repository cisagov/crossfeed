import {
  Entity,
  Column,
  PrimaryGeneratedColumn,
  BaseEntity,
  CreateDateColumn,
  ManyToOne,
  Index
} from 'typeorm';
import { Domain } from './domain';

@Entity()
@Index(['domain', 'title'], { unique: true })
export class Vulnerability extends BaseEntity {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @ManyToOne((type) => Domain, (domain) => domain.vulnerabilities, {
    onDelete: 'CASCADE',
    onUpdate: 'CASCADE'
  })
  domain: Domain;

  @CreateDateColumn()
  createdAt: Date;

  @Column({ nullable: true, type: 'timestamp' })
  lastSeen: Date | null;

  @Column()
  title: string;

  @Column({
    nullable: true,
    type: 'text'
  })
  cve: string | null;

  @Column({
    nullable: true,
    type: 'text'
  })
  cwe: string | null;

  @Column({
    nullable: true,
    type: 'text'
  })
  cpe: string | null;

  @Column({
    default: ''
  })
  description: string;

  @Column({
    nullable: true,
    type: 'decimal'
  })
  cvss: number | null;

  @Column({
    nullable: true,
    type: 'text'
  })
  severity: 'None' | 'Low' | 'Medium' | 'High' | 'Critical' | null;

  @Column({ default: 'open' })
  state: 'open' | 'closed';
}
