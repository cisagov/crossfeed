import {
  Entity,
  Column,
  PrimaryGeneratedColumn,
  BaseEntity,
  CreateDateColumn,
  ManyToOne,
  Index,
  UpdateDateColumn
} from 'typeorm';
import { User } from './user';
import { Domain } from './domain';
import { Service } from './service';

export type VulnerabilitySubstate =
  | 'unconfirmed'
  | 'exploitable'
  | 'false-positive'
  | 'accepted-risk'
  | 'remediated';

@Entity()
@Index(['domain', 'title'], { unique: true })
export class Vulnerability extends BaseEntity {
  @PrimaryGeneratedColumn('uuid')
  id: string;

  @ManyToOne((type) => Domain, (domain) => domain.vulnerabilities, {
    onDelete: 'CASCADE',
    onUpdate: 'CASCADE'
  })
  domain: Domain;

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;

  @Column({ nullable: true, type: 'timestamp' })
  lastSeen: Date | null;

  @Column()
  title: string;

  @Column({
    nullable: true,
    type: 'text'
  })
  cve: string | null;

  @Column({
    nullable: true,
    type: 'text'
  })
  cwe: string | null;

  @Column({
    nullable: true,
    type: 'text'
  })
  cpe: string | null;

  @Column({
    default: ''
  })
  description: string;

  @Column({
    type: 'jsonb',
    default: []
  })
  references: {
    url: string;
    name: string;
    source: string;
    tags: string[];
  }[];

  @Column({
    nullable: true,
    type: 'decimal'
  })
  cvss: number | null;

  @Column({
    nullable: true,
    type: 'text'
  })
  severity: 'None' | 'Low' | 'Medium' | 'High' | 'Critical' | null;

  @Column({
    default: true
  })
  needsPopulation: boolean;

  @Column({ default: 'open' })
  state: 'open' | 'closed';

  @Column({ default: 'unconfirmed' })
  substate: VulnerabilitySubstate;

  @Column({
    default: ''
  })
  notes: string;

  @ManyToOne((type) => Service, {
    onDelete: 'CASCADE',
    onUpdate: 'CASCADE'
  })
  service: Service;

  @Column({
    type: 'jsonb',
    default: []
  })
  actions: {
    type: 'state-change' | 'comment';
    state?: string;
    substate?: string;
    value?: string;
    automatic: boolean;
    userId: string | null;
    userName: string | null;
    date: Date;
  }[];

  setState(
    substate: VulnerabilitySubstate,
    automatic: boolean,
    user: User | null
  ) {
    this.substate = substate;
    if (substate === 'unconfirmed' || substate === 'exploitable')
      this.state = 'open';
    else this.state = 'closed';
    this.actions.unshift({
      type: 'state-change',
      state: this.state,
      substate: this.substate,
      automatic,
      userId: user ? user.id : null,
      userName: user ? user.fullName : null,
      date: new Date()
    });
  }
}
