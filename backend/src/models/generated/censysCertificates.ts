/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, run "npm run codegen" to regenerate this file.
 */

export interface CensysCertificatesData {
  validation?: {
    nss?: {
      paths?: {
        path?: string;
        [k: string]: unknown;
      };
      /**
       * True if the certificate is explicitly blacklisted by some method than OneCRL/CRLSet. For example, a set of certificates revoked by Cloudflare are blacklisted by SPKI hash in Chrome.
       */
      blacklisted?: boolean;
      /**
       * True if now or at some point in the past there existed a path from the certificate to the root store.
       */
      had_trusted_path?: boolean;
      /**
       * True if the certificate is explicitly whitelisted, e.g. the set of trusted WoSign certificates Apple uses.
       */
      whitelisted?: boolean;
      /**
       * True if the certificate is in the revocation set (e.g. OneCRL) associated with this root store.
       */
      in_revocation_set?: boolean;
      /**
       * True if the certificate is valid now or was ever valid in the past.
       */
      was_valid?: boolean;
      /**
       * ((has_trusted_path && !revoked && !blacklisted) || whitelisted) && !expired
       */
      valid?: boolean;
      parents?: string;
      /**
       * True if there exists a path from the certificate to the root store.
       */
      trusted_path?: boolean;
      /**
       * Indicates if the certificate is a root, intermediate, or leaf.
       */
      type?: string;
      [k: string]: unknown;
    };
    google_ct_primary?: {
      paths?: {
        path?: string;
        [k: string]: unknown;
      };
      /**
       * True if the certificate is explicitly blacklisted by some method than OneCRL/CRLSet. For example, a set of certificates revoked by Cloudflare are blacklisted by SPKI hash in Chrome.
       */
      blacklisted?: boolean;
      /**
       * True if now or at some point in the past there existed a path from the certificate to the root store.
       */
      had_trusted_path?: boolean;
      /**
       * True if the certificate is explicitly whitelisted, e.g. the set of trusted WoSign certificates Apple uses.
       */
      whitelisted?: boolean;
      /**
       * True if the certificate is in the revocation set (e.g. OneCRL) associated with this root store.
       */
      in_revocation_set?: boolean;
      /**
       * True if the certificate is valid now or was ever valid in the past.
       */
      was_valid?: boolean;
      /**
       * ((has_trusted_path && !revoked && !blacklisted) || whitelisted) && !expired
       */
      valid?: boolean;
      parents?: string;
      /**
       * True if there exists a path from the certificate to the root store.
       */
      trusted_path?: boolean;
      /**
       * Indicates if the certificate is a root, intermediate, or leaf.
       */
      type?: string;
      [k: string]: unknown;
    };
    apple?: {
      paths?: {
        path?: string;
        [k: string]: unknown;
      };
      /**
       * True if the certificate is explicitly blacklisted by some method than OneCRL/CRLSet. For example, a set of certificates revoked by Cloudflare are blacklisted by SPKI hash in Chrome.
       */
      blacklisted?: boolean;
      /**
       * True if now or at some point in the past there existed a path from the certificate to the root store.
       */
      had_trusted_path?: boolean;
      /**
       * True if the certificate is explicitly whitelisted, e.g. the set of trusted WoSign certificates Apple uses.
       */
      whitelisted?: boolean;
      /**
       * True if the certificate is in the revocation set (e.g. OneCRL) associated with this root store.
       */
      in_revocation_set?: boolean;
      /**
       * True if the certificate is valid now or was ever valid in the past.
       */
      was_valid?: boolean;
      /**
       * ((has_trusted_path && !revoked && !blacklisted) || whitelisted) && !expired
       */
      valid?: boolean;
      parents?: string;
      /**
       * True if there exists a path from the certificate to the root store.
       */
      trusted_path?: boolean;
      /**
       * Indicates if the certificate is a root, intermediate, or leaf.
       */
      type?: string;
      [k: string]: unknown;
    };
    microsoft?: {
      paths?: {
        path?: string;
        [k: string]: unknown;
      };
      /**
       * True if the certificate is explicitly blacklisted by some method than OneCRL/CRLSet. For example, a set of certificates revoked by Cloudflare are blacklisted by SPKI hash in Chrome.
       */
      blacklisted?: boolean;
      /**
       * True if now or at some point in the past there existed a path from the certificate to the root store.
       */
      had_trusted_path?: boolean;
      /**
       * True if the certificate is explicitly whitelisted, e.g. the set of trusted WoSign certificates Apple uses.
       */
      whitelisted?: boolean;
      /**
       * True if the certificate is in the revocation set (e.g. OneCRL) associated with this root store.
       */
      in_revocation_set?: boolean;
      /**
       * True if the certificate is valid now or was ever valid in the past.
       */
      was_valid?: boolean;
      /**
       * ((has_trusted_path && !revoked && !blacklisted) || whitelisted) && !expired
       */
      valid?: boolean;
      parents?: string;
      /**
       * True if there exists a path from the certificate to the root store.
       */
      trusted_path?: boolean;
      /**
       * Indicates if the certificate is a root, intermediate, or leaf.
       */
      type?: string;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  parent_spki_subject_fingerprint?: string;
  tags?: string;
  added_at?: string;
  fingerprint_sha256?: string;
  raw?: string;
  parents?: string;
  zlint?: {
    version?: string;
    errors_present?: boolean;
    fatals_present?: boolean;
    warnings_present?: boolean;
    lints?: {
      e_name_constraint_empty?: string;
      e_ev_valid_time_too_long?: string;
      e_sub_ca_must_not_contain_any_policy?: string;
      e_root_ca_extended_key_usage_present?: string;
      e_ext_ian_uri_format_invalid?: string;
      e_rsa_mod_less_than_2048_bits?: string;
      e_ext_san_missing?: string;
      e_sub_cert_cert_policy_empty?: string;
      e_sub_ca_crl_distribution_points_does_not_contain_url?: string;
      e_sub_cert_postal_code_must_not_appear?: string;
      e_ext_cert_policy_disallowed_any_policy_qualifier?: string;
      e_ext_san_not_critical_without_subject?: string;
      e_sub_ca_crl_distribution_points_missing?: string;
      e_cert_policy_ov_requires_country?: string;
      w_name_constraint_on_x400?: string;
      w_multiple_subject_rdn?: string;
      e_ian_dns_name_includes_null_char?: string;
      e_ext_name_constraints_not_in_ca?: string;
      e_subject_locality_name_max_length?: string;
      n_contains_redacted_dnsname?: string;
      e_international_dns_name_not_unicode?: string;
      e_sub_cert_locality_name_must_not_appear?: string;
      w_ext_cert_policy_contains_noticeref?: string;
      e_sub_cert_country_name_must_appear?: string;
      e_ext_key_usage_cert_sign_without_ca?: string;
      w_root_ca_basic_constraints_path_len_constraint_field_present?: string;
      e_cab_dv_conflicts_with_street?: string;
      e_ext_subject_key_identifier_missing_ca?: string;
      e_sub_cert_aia_marked_critical?: string;
      w_sub_cert_aia_does_not_contain_issuing_ca_url?: string;
      e_san_dns_name_includes_null_char?: string;
      e_subject_common_name_max_length?: string;
      e_ext_key_usage_without_bits?: string;
      e_utc_time_not_in_zulu?: string;
      e_ext_freshest_crl_marked_critical?: string;
      e_international_dns_name_not_nfkc?: string;
      e_ext_san_empty_name?: string;
      e_sub_cert_key_usage_cert_sign_bit_set?: string;
      w_ext_san_critical_with_subject_dn?: string;
      w_sub_ca_aia_does_not_contain_issuing_ca_url?: string;
      e_subject_state_name_max_length?: string;
      w_san_iana_pub_suffix_empty?: string;
      e_ext_authority_key_identifier_missing?: string;
      e_ext_san_contains_reserved_ip?: string;
      e_ext_san_directory_name_present?: string;
      e_distribution_point_incomplete?: string;
      e_dsa_params_missing?: string;
      e_dnsname_underscore_in_sld?: string;
      e_cab_dv_conflicts_with_province?: string;
      e_ian_wildcard_not_first?: string;
      n_ca_digital_signature_not_set?: string;
      e_dnsname_not_valid_tld?: string;
      e_issuer_field_empty?: string;
      e_sub_ca_crl_distribution_points_marked_critical?: string;
      e_cab_dv_conflicts_with_org?: string;
      e_ca_key_usage_missing?: string;
      e_ext_san_uniform_resource_identifier_present?: string;
      e_ext_subject_directory_attr_critical?: string;
      e_name_constraint_maximum_not_absent?: string;
      e_cert_policy_iv_requires_country?: string;
      e_cab_dv_conflicts_with_postal?: string;
      e_inhibit_any_policy_not_critical?: string;
      e_ev_organization_name_missing?: string;
      e_public_key_type_not_allowed?: string;
      e_old_sub_ca_rsa_mod_less_than_1024_bits?: string;
      e_ext_san_uri_not_ia5?: string;
      e_sub_cert_key_usage_crl_sign_bit_set?: string;
      e_ext_policy_constraints_not_critical?: string;
      e_subject_country_not_iso?: string;
      e_signature_algorithm_not_supported?: string;
      e_cab_iv_requires_personal_name?: string;
      e_san_dns_name_starts_with_period?: string;
      e_ext_policy_map_any_policy?: string;
      e_subject_not_dn?: string;
      e_ext_policy_constraints_empty?: string;
      e_san_bare_wildcard?: string;
      e_ext_san_uri_host_not_fqdn_or_ip?: string;
      e_ian_dns_name_starts_with_period?: string;
      e_ca_key_usage_not_critical?: string;
      w_root_ca_contains_cert_policy?: string;
      w_sub_cert_certificate_policies_marked_critical?: string;
      w_name_constraint_on_edi_party_name?: string;
      e_ext_san_edi_party_name_present?: string;
      e_generalized_time_includes_fraction_seconds?: string;
      e_dnsname_left_label_wildcard_correct?: string;
      n_subject_common_name_included?: string;
      w_multiple_issuer_rdn?: string;
      e_subject_empty_without_san?: string;
      w_sub_ca_name_constraints_not_critical?: string;
      e_dsa_correct_order_in_subgroup?: string;
      w_dnsname_underscore_in_trd?: string;
      e_sub_cert_aia_missing?: string;
      e_root_ca_key_usage_present?: string;
      e_utc_time_does_not_include_seconds?: string;
      w_name_constraint_on_registered_id?: string;
      e_serial_number_longer_than_20_octets?: string;
      e_sub_cert_valid_time_too_long?: string;
      w_ext_key_usage_not_critical?: string;
      e_sub_cert_crl_distribution_points_marked_critical?: string;
      w_ext_aia_access_location_missing?: string;
      e_generalized_time_not_in_zulu?: string;
      e_ca_key_cert_sign_not_set?: string;
      e_dsa_improper_modulus_or_divisor_size?: string;
      e_serial_number_not_positive?: string;
      w_ext_policy_map_not_in_cert_policy?: string;
      e_sub_cert_or_sub_ca_using_sha1?: string;
      e_ext_name_constraints_not_critical?: string;
      e_validity_time_not_positive?: string;
      e_ext_san_dns_name_too_long?: string;
      e_sub_cert_eku_missing?: string;
      w_eku_critical_improperly?: string;
      w_subject_dn_trailing_whitespace?: string;
      e_dnsname_empty_label?: string;
      w_sub_cert_sha1_expiration_too_long?: string;
      e_sub_cert_not_is_ca?: string;
      e_name_constraint_minimum_non_zero?: string;
      e_ev_locality_name_missing?: string;
      e_ext_ian_uri_host_not_fqdn_or_ip?: string;
      e_cert_unique_identifier_version_not_2_or_3?: string;
      e_generalized_time_does_not_include_seconds?: string;
      e_ev_country_name_missing?: string;
      e_cab_dv_conflicts_with_locality?: string;
      e_path_len_constraint_improperly_included?: string;
      e_sub_ca_eku_name_constraints?: string;
      e_sub_ca_aia_marked_critical?: string;
      w_rsa_mod_not_odd?: string;
      e_sub_cert_aia_does_not_contain_ocsp_url?: string;
      e_ev_business_category_missing?: string;
      e_sub_ca_eku_missing?: string;
      e_sub_cert_locality_name_must_appear?: string;
      e_sub_cert_given_name_surname_contains_correct_policy?: string;
      e_cab_ov_requires_org?: string;
      e_sub_cert_street_address_should_not_exist?: string;
      e_ext_aia_marked_critical?: string;
      e_sub_ca_certificate_policies_missing?: string;
      w_issuer_dn_leading_whitespace?: string;
      w_ext_policy_map_not_critical?: string;
      e_ext_authority_key_identifier_no_key_identifier?: string;
      e_cert_policy_ov_requires_province_or_locality?: string;
      e_ec_improper_curves?: string;
      e_dnsname_wildcard_only_in_left_label?: string;
      e_rsa_public_exponent_too_small?: string;
      w_ext_crl_distribution_marked_critical?: string;
      e_rsa_exp_negative?: string;
      e_subject_common_name_not_from_san?: string;
      e_subject_organizational_unit_name_max_length?: string;
      n_sub_ca_eku_not_technically_constrained?: string;
      e_ca_subject_field_empty?: string;
      e_root_ca_key_usage_must_be_critical?: string;
      e_ext_ian_dns_not_ia5_string?: string;
      w_ext_cert_policy_explicit_text_includes_control?: string;
      w_ext_ian_critical?: string;
      e_sub_cert_certificate_policies_missing?: string;
      w_rsa_mod_factors_smaller_than_752?: string;
      e_ian_bare_wildcard?: string;
      w_serial_number_low_entropy?: string;
      e_ext_san_no_entries?: string;
      e_sub_ca_aia_does_not_contain_ocsp_url?: string;
      w_sub_ca_eku_critical?: string;
      w_ext_subject_key_identifier_missing_sub_cert?: string;
      e_rsa_no_public_key?: string;
      e_dnsname_hyphen_in_sld?: string;
      e_cert_policy_iv_requires_province_or_locality?: string;
      e_subject_contains_noninformational_value?: string;
      w_dnsname_wildcard_left_of_public_suffix?: string;
      e_ext_ian_uri_not_ia5?: string;
      w_sub_ca_certificate_policies_marked_critical?: string;
      e_sub_ca_aia_missing?: string;
      e_basic_constraints_not_critical?: string;
      w_rsa_public_exponent_not_in_range?: string;
      e_ext_cert_policy_duplicate?: string;
      e_ext_cert_policy_explicit_text_too_long?: string;
      w_issuer_dn_trailing_whitespace?: string;
      e_ext_san_dns_not_ia5_string?: string;
      e_sub_cert_province_must_not_appear?: string;
      e_subject_contains_reserved_ip?: string;
      e_dsa_shorter_than_2048_bits?: string;
      e_dnsname_bad_character_in_label?: string;
      e_san_wildcard_not_first?: string;
      e_ext_ian_empty_name?: string;
      w_ext_cert_policy_explicit_text_not_nfc?: string;
      e_ca_country_name_invalid?: string;
      e_ca_country_name_missing?: string;
      w_sub_cert_eku_extra_values?: string;
      e_dnsname_contains_bare_iana_suffix?: string;
      w_ian_iana_pub_suffix_empty?: string;
      e_old_root_ca_rsa_mod_less_than_2048_bits?: string;
      e_ca_is_ca?: string;
      e_sub_cert_province_must_appear?: string;
      e_ca_common_name_missing?: string;
      e_path_len_constraint_zero_or_less?: string;
      e_ext_san_uri_relative?: string;
      e_ext_subject_key_identifier_critical?: string;
      e_sub_cert_eku_server_auth_client_auth_missing?: string;
      e_wrong_time_format_pre2050?: string;
      e_dsa_unique_correct_representation?: string;
      e_ext_ian_uri_relative?: string;
      e_ext_cert_policy_explicit_text_ia5_string?: string;
      w_distribution_point_missing_ldap_or_uri?: string;
      e_subject_info_access_marked_critical?: string;
      e_ext_san_other_name_present?: string;
      e_ca_crl_sign_not_set?: string;
      e_ev_serial_number_missing?: string;
      e_ext_san_registered_id_present?: string;
      e_ext_san_uri_format_invalid?: string;
      e_ext_ian_space_dns_name?: string;
      e_dnsname_label_too_long?: string;
      e_ext_san_rfc822_name_present?: string;
      e_sub_cert_crl_distribution_points_does_not_contain_url?: string;
      e_ca_organization_name_missing?: string;
      w_subject_dn_leading_whitespace?: string;
      e_ext_ian_rfc822_format_invalid?: string;
      e_subject_organization_name_max_length?: string;
      e_cert_contains_unique_identifier?: string;
      e_ext_duplicate_extension?: string;
      e_invalid_certificate_version?: string;
      e_ext_ian_no_entries?: string;
      e_cert_extensions_version_not_3?: string;
      e_old_sub_cert_rsa_mod_less_than_1024_bits?: string;
      e_ext_san_space_dns_name?: string;
      e_ext_authority_key_identifier_critical?: string;
      e_ext_san_rfc822_format_invalid?: string;
      e_rsa_public_exponent_not_odd?: string;
      w_ext_cert_policy_explicit_text_not_utf8?: string;
      [k: string]: unknown;
    };
    notices_present?: boolean;
    [k: string]: unknown;
  };
  precert?: boolean;
  ct?: {
    certificatetransparency_cn_ct?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    google_argon_2017?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    sheca_ct?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    digicert_nessie_2019?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    digicert_nessie_2018?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    google_pilot?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    google_xenon_2019?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    comodo_mammoth?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    akamai_ct?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    behind_the_sofa?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    google_argon_2018?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    google_argon_2019?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    wosign_ct?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    google_xenon_2021?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    letsencrypt_ct_faux?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    comodo_dodo?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    venafi_api_ctlog?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    wosign_ctlog2?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    izenpe_eus_ct?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    wotrus_ctlog?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    gdca_log2?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    wosign_ctlog3?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    letsencrypt_ct_oak_2021?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    digicert_golem?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    google_skydiver?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    letsencrypt_ct_oak_2022?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    google_aviator?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    gdca_ct?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    google_rocketeer?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    izenpe_com_ct?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    cloudflare_nimbus_2021?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    cloudflare_nimbus_2020?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    symantec_ws_deneb?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    google_daedalus?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    google_xenon_2018?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    izenpe_com_pilot?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    digicert_yeti_2022?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    google_xenon_2022?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    digicert_yeti_2020?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    digicert_yeti_2021?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    symantec_ws_ct?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    google_argon_2020?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    digicert_nessie_2020?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    digicert_nessie_2021?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    digicert_nessie_2022?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    letsencrypt_ct_oak?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    google_xenon_2020?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    comodo_sabre?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    google_argon_2021?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    gdca_ctlog?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    nordu_ct_flimsy?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    google_testtube?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    digicert_yeti_2019?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    digicert_yeti_2018?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    nordu_ct_plausible?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    startssl_ct?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    symantec_ws_vega?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    wotrus_ctlog3?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    ctlogs_alpha?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    wosign_ctlog?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    cloudflare_nimbus_2017?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    symantec_ws_sirius?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    google_icarus?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    digicert_ct1?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    letsencrypt_ct_oak_2020?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    gdca_log?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    digicert_ct2?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    letsencrypt_ct_oak_2019?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    cloudflare_nimbus_2018?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    cloudflare_nimbus_2019?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    cnnic_ctserver?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    certly_log?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    sheca_ctlog?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    letsencrypt_ct_clicky?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    google_submariner?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    venafi_api_ctlog_gen2?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    letsencrypt_ct_birch?: {
      index?: string;
      censys_to_ct_at?: string;
      ct_to_censys_at?: string;
      added_to_ct_at?: string;
      sct?: string;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  parsed?: {
    /**
     * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
     */
    fingerprint_sha256?: string;
    /**
     * The certificate's public key. Only one of the *_public_key fields will be set.
     */
    subject_key_info?: {
      /**
       * The SHA2-256 digest calculated over the certificate's DER-encoded SubjectPublicKeyInfo field.
       */
      fingerprint_sha256?: string;
      /**
       * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
       */
      rsa_public_key?: {
        /**
         * Bit-length of modulus.
         */
        length?: string;
        /**
         * The RSA key's modulus (n) in big-endian encoding.
         */
        modulus?: string;
        /**
         * The RSA key's public exponent (e).
         */
        exponent?: string;
        [k: string]: unknown;
      };
      /**
       * Identifies the type of key and any relevant parameters.
       */
      key_algorithm?: {
        /**
         * OID of the public key on the certificate. This is helpful when an unknown type is present. This field is reserved and not currently populated.
         */
        oid?: string;
        /**
         * Name of public key type, e.g., RSA or ECDSA. More information is available the named SubRecord (e.g., RSAPublicKey()).
         */
        name?: string;
        [k: string]: unknown;
      };
      /**
       * The public portion of an ECDSA asymmetric key.
       */
      ecdsa_public_key?: {
        b?: string;
        curve?: string;
        gy?: string;
        n?: string;
        p?: string;
        length?: string;
        pub?: string;
        y?: string;
        x?: string;
        gx?: string;
        [k: string]: unknown;
      };
      /**
       * The public portion of a DSA asymmetric key.
       */
      dsa_public_key?: {
        q?: string;
        p?: string;
        y?: string;
        g?: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    /**
     * The x.509 certificate version number.
     */
    version?: string;
    /**
     * A canonical string representation of the subject name.
     */
    subject_dn?: string;
    /**
     * List of raw extensions that were not recognized by the application.
     */
    unknown_extensions?: {
      /**
       * Certificates should be rejected if they have critical extensions the validator does not recognize.
       */
      critical?: boolean;
      /**
       * The OBJECT IDENTIFIER identifying the extension.
       */
      id?: string;
      /**
       * The raw value of the extnValue OCTET STREAM.
       */
      value?: string;
      [k: string]: unknown;
    };
    /**
     * Identifies the algorithm used by the CA to sign the certificate.
     */
    signature_algorithm?: {
      /**
       * The OBJECT IDENTIFIER of the signature algorithm, in dotted-decimal notation.
       */
      oid?: string;
      /**
       * Name of signature algorithm, e.g., SHA1-RSA or ECDSA-SHA512. Unknown algorithms get an integer id.
       */
      name?: string;
      [k: string]: unknown;
    };
    /**
     * This is set if any of the certificate's names contain redacted fields.
     */
    redacted?: boolean;
    /**
     * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, *with any CT extensions omitted*, as a hexadecimal string.
     */
    tbs_noct_fingerprint?: string;
    /**
     * A canonical string representation of the issuer name.
     */
    issuer_dn?: string;
    /**
     * The SHA1 digest over the DER encoding of the certificate, as a hexadecimal string.
     */
    fingerprint_sha1?: string;
    /**
     * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, as a hexadecimal string.
     */
    tbs_fingerprint?: string;
    extensions?: {
      /**
       * The parsed id-ce-nameConstraints extension (2.5.29.30). Specifies a name space within which all child certificates' subject names MUST be located.
       */
      name_constraints?: {
        /**
         * Permitted names of type directoryName.
         */
        permitted_directory_names?: {
          /**
           * jurisdictionCountry elements of the distinguished name (OBJECT IDENTIFIER 1.3.6.1.4.1.311.60.2.1.3)
           */
          jurisdiction_country?: string;
          /**
           * stateOrProviceName (ST) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.8)
           */
          province?: string;
          /**
           * surname (SN) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.4)
           */
          surname?: string;
          /**
           * localityName (L) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.7)
           */
          locality?: string;
          /**
           * domainComponent (DC) elements of the distinguished name (OBJECT IDENTIFIER 0.9.2342.19200300.100.1.25)
           */
          domain_component?: string;
          /**
           * countryName (C) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.6)
           */
          country?: string;
          /**
           * jurisdictionStateOrProvice elements of the distinguished name (OBJECT IDENTIFIER 1.3.6.1.4.1.311.60.2.1.2)
           */
          jurisdiction_province?: string;
          /**
           * jurisdictionLocality elements of the distinguished name (OBJECT IDENTIFIER 1.3.6.1.4.1.311.60.2.1.1)
           */
          jurisdiction_locality?: string;
          /**
           * postalCode elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.17)
           */
          postal_code?: string;
          /**
           * organizationId elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.97)
           */
          organization_id?: string;
          /**
           * organizationalUnit (OU) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.11)
           */
          organizational_unit?: string;
          /**
           * givenName (G) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.42)
           */
          given_name?: string;
          /**
           * serialNumber elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.5)
           */
          serial_number?: string;
          /**
           * commonName (CN) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.3)
           */
          common_name?: string;
          /**
           * organizationName (O) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.10)
           */
          organization?: string;
          /**
           * emailAddress (E) elements of the distinguished name (OBJECT IDENTIFIER 1.2.840.113549.1.9.1)
           */
          email_address?: string;
          /**
           * streetAddress (STREET) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.9)
           */
          street_address?: string;
          [k: string]: unknown;
        };
        /**
         * Permitted names of type rfc822Name.
         */
        permitted_email_addresses?: string;
        /**
         * Excluded names of type ediPartyName.
         */
        excluded_edi_party_names?: {
          /**
           * The partyName (a DirectoryString)
           */
          party_name?: string;
          /**
           * The nameAssigner (a DirectoryString)
           */
          name_assigner?: string;
          [k: string]: unknown;
        };
        /**
         * Permitted names of type registeredID.
         */
        permitted_registered_ids?: string;
        /**
         * Excluded names of type rfc822Name.
         */
        excluded_email_addresses?: string;
        /**
         * Excluded names of type registeredID.
         */
        excluded_registered_ids?: string;
        /**
         * Excluded names of type dNSName.
         */
        excluded_names?: string;
        /**
         * If set, clients unable to understand this extension must reject this certificate.
         */
        critical?: boolean;
        /**
         * Permitted names of type ediPartyName
         */
        permitted_edi_party_names?: {
          /**
           * The partyName (a DirectoryString)
           */
          party_name?: string;
          /**
           * The nameAssigner (a DirectoryString)
           */
          name_assigner?: string;
          [k: string]: unknown;
        };
        /**
         * Excluded names of type directoryName.
         */
        excluded_directory_names?: {
          /**
           * jurisdictionCountry elements of the distinguished name (OBJECT IDENTIFIER 1.3.6.1.4.1.311.60.2.1.3)
           */
          jurisdiction_country?: string;
          /**
           * stateOrProviceName (ST) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.8)
           */
          province?: string;
          /**
           * surname (SN) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.4)
           */
          surname?: string;
          /**
           * localityName (L) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.7)
           */
          locality?: string;
          /**
           * domainComponent (DC) elements of the distinguished name (OBJECT IDENTIFIER 0.9.2342.19200300.100.1.25)
           */
          domain_component?: string;
          /**
           * countryName (C) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.6)
           */
          country?: string;
          /**
           * jurisdictionStateOrProvice elements of the distinguished name (OBJECT IDENTIFIER 1.3.6.1.4.1.311.60.2.1.2)
           */
          jurisdiction_province?: string;
          /**
           * jurisdictionLocality elements of the distinguished name (OBJECT IDENTIFIER 1.3.6.1.4.1.311.60.2.1.1)
           */
          jurisdiction_locality?: string;
          /**
           * postalCode elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.17)
           */
          postal_code?: string;
          /**
           * organizationId elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.97)
           */
          organization_id?: string;
          /**
           * organizationalUnit (OU) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.11)
           */
          organizational_unit?: string;
          /**
           * givenName (G) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.42)
           */
          given_name?: string;
          /**
           * serialNumber elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.5)
           */
          serial_number?: string;
          /**
           * commonName (CN) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.3)
           */
          common_name?: string;
          /**
           * organizationName (O) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.10)
           */
          organization?: string;
          /**
           * emailAddress (E) elements of the distinguished name (OBJECT IDENTIFIER 1.2.840.113549.1.9.1)
           */
          email_address?: string;
          /**
           * streetAddress (STREET) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.9)
           */
          street_address?: string;
          [k: string]: unknown;
        };
        /**
         * Permitted names of type dNSName.
         */
        permitted_names?: string;
        [k: string]: unknown;
      };
      /**
       * A key identifier, usually a digest of the DER encoding of a SubjectPublicKeyInfo. This is the hex encoding of the OCTET STRING value.
       */
      authority_key_id?: string;
      /**
       * The CA/BF organization ID extensions (2.23.140.3.1)
       */
      cabf_organization_id?: {
        country?: string;
        state?: string;
        scheme?: string;
        reference?: string;
        [k: string]: unknown;
      };
      /**
       * The parsed Subject Alternative Name extension (id-ce-subjectAltName, 2.5.29.17).
       */
      subject_alt_name?: {
        /**
         * uniformResourceIdentifier entries in the GeneralName (CHOICE tag 6).
         */
        uniform_resource_identifiers?: string;
        /**
         * Parsed directoryName entries in the GeneralName (CHOICE tag 4).
         */
        directory_names?: {
          /**
           * jurisdictionCountry elements of the distinguished name (OBJECT IDENTIFIER 1.3.6.1.4.1.311.60.2.1.3)
           */
          jurisdiction_country?: string;
          /**
           * stateOrProviceName (ST) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.8)
           */
          province?: string;
          /**
           * surname (SN) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.4)
           */
          surname?: string;
          /**
           * localityName (L) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.7)
           */
          locality?: string;
          /**
           * domainComponent (DC) elements of the distinguished name (OBJECT IDENTIFIER 0.9.2342.19200300.100.1.25)
           */
          domain_component?: string;
          /**
           * countryName (C) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.6)
           */
          country?: string;
          /**
           * jurisdictionStateOrProvice elements of the distinguished name (OBJECT IDENTIFIER 1.3.6.1.4.1.311.60.2.1.2)
           */
          jurisdiction_province?: string;
          /**
           * jurisdictionLocality elements of the distinguished name (OBJECT IDENTIFIER 1.3.6.1.4.1.311.60.2.1.1)
           */
          jurisdiction_locality?: string;
          /**
           * postalCode elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.17)
           */
          postal_code?: string;
          /**
           * organizationId elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.97)
           */
          organization_id?: string;
          /**
           * organizationalUnit (OU) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.11)
           */
          organizational_unit?: string;
          /**
           * givenName (G) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.42)
           */
          given_name?: string;
          /**
           * serialNumber elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.5)
           */
          serial_number?: string;
          /**
           * commonName (CN) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.3)
           */
          common_name?: string;
          /**
           * organizationName (O) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.10)
           */
          organization?: string;
          /**
           * emailAddress (E) elements of the distinguished name (OBJECT IDENTIFIER 1.2.840.113549.1.9.1)
           */
          email_address?: string;
          /**
           * streetAddress (STREET) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.9)
           */
          street_address?: string;
          [k: string]: unknown;
        };
        /**
         * iPAddress entries in the GeneralName (CHOICE tag 7).
         */
        ip_addresses?: string;
        /**
         * otherName entries in the GeneralName (CHOICE tag 0). An arbitrary binary value identified by an OBJECT IDENTIFIER.
         */
        other_names?: {
          /**
           * The OBJECT IDENTIFIER identifying the syntax of the otherName value.
           */
          id?: string;
          /**
           * The raw otherName value.
           */
          value?: string;
          [k: string]: unknown;
        };
        /**
         * registeredID entries in the GeneralName (OBJECT IDENTIFIER, CHOICE tag 8). Stored in dotted-decimal format.
         */
        registered_ids?: string;
        /**
         * Parsed eDIPartyName entries in the GeneralName (CHOICE tag 5)
         */
        edi_party_names?: {
          /**
           * The partyName (a DirectoryString)
           */
          party_name?: string;
          /**
           * The nameAssigner (a DirectoryString)
           */
          name_assigner?: string;
          [k: string]: unknown;
        };
        /**
         * dNSName entries in the GeneralName (IA5String, CHOICE tag 2).
         */
        dns_names?: string;
        /**
         * rfc822Name entries in the GeneralName (IA5String, CHOICE tag 1).
         */
        email_addresses?: string;
        [k: string]: unknown;
      };
      /**
       * The parsed id-pe-authorityInfoAccess extension (1.3.6.1.5.7.1.1). Only id-ad-caIssuers and id-ad-ocsp accessMethods are supported; others are omitted.
       */
      authority_info_access?: {
        /**
         * URLs of accessLocations with accessMethod of id-ad-ocsp, pointing to OCSP servers that can be used to check this certificate's revocation status. Only uniformResourceIdentifier accessLocations are supported; others are omitted.
         */
        ocsp_urls?: string;
        /**
         * URLs of accessLocations with accessMethod of id-ad-caIssuers, pointing to locations where this certificate's issuers can be downloaded. Only uniformResourceIdentifier accessLocations are supported; others are omitted.
         */
        issuer_urls?: string;
        [k: string]: unknown;
      };
      /**
       * The parsed id-ce-basicConstraints extension (2.5.29.19); see RFC 5280.
       */
      basic_constraints?: {
        /**
         * When present, gives the  maximum number of non-self-issued intermediate certificates that may follow this certificate in a valid certification path.
         */
        max_path_len?: string;
        /**
         * Indicates that the certificate is permitted to sign other certificates.
         */
        is_ca?: boolean;
        [k: string]: unknown;
      };
      /**
       * IDs and parsed statements for qualified certificates (1.3.6.1.5.5.7.1.3)
       */
      qc_statements?: {
        /**
         * All included statement OIDs
         */
        ids?: string;
        /**
         * Contains known QCStatements. Each field is repeated to handle the case where a single statement appears more than once.
         */
        parsed?: {
          /**
           * Statement ID 0.4.0.1862.1.7
           */
          legislation?: {
            /**
             * Country codes for the set of countries where this certificate issued as a qualified certificate
             */
            country_codes?: string;
            [k: string]: unknown;
          };
          /**
           * Statement ID 0.4.0.1862.1.3
           */
          retention_period?: string;
          /**
           * Statement ID 0.4.0.1862.1.5
           */
          pds_locations?: {
            /**
             * Included PDS locations
             */
            locations?: {
              /**
               * Location of the PDS
               */
              url?: string;
              /**
               * Locale code
               */
              language?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * Statement ID 0.4.0.1862.1.2
           */
          limit?: {
            /**
             * Currency, if provided as an integer
             */
            currency_number?: string;
            /**
             * Currency, if provided as a string
             */
            currency?: string;
            /**
             * Value in currency
             */
            amount?: string;
            /**
             * Total is amount times 10 raised to the exponent
             */
            exponent?: string;
            [k: string]: unknown;
          };
          /**
           * True if present (Statement ID 0.4.0.1862.1.4
           */
          sscd?: boolean;
          /**
           * True if present (Statement ID 0.4.0.1862.1.1)
           */
          etsi_compliance?: boolean;
          /**
           * Statement ID 0.4.0.1862.1.6
           */
          types?: {
            /**
             * Included QC type OIDs
             */
            ids?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      /**
       * The parsed id-ce-certificatePolicies extension (2.5.29.32).
       */
      certificate_policies?: {
        /**
         * List of URIs to the policies
         */
        cps?: string;
        /**
         * The OBJECT IDENTIFIER identifying the policy.
         */
        id?: string;
        /**
         * List of textual notices to display relying parties.
         */
        user_notice?: {
          /**
           * Names an organization and identifies, by number, a particular textual statement prepared by that organization.
           */
          notice_reference?: {
            /**
             * The numeric identifier(s) of the notice.
             */
            notice_numbers?: string;
            /**
             * The organization that prepared the notice.
             */
            organization?: string;
            [k: string]: unknown;
          };
          /**
           * Textual statement with a maximum size of 200 characters. Should be a UTF8String or IA5String.
           */
          explicit_text?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      /**
       * The parsed id-ce-cRLDistributionPoints extension (2.5.29.31). Contents are a list of distributionPoint URLs (other distributionPoint types are omitted).
       */
      crl_distribution_points?: string;
      /**
       * The parsed id-ce-keyUsage extension (2.5.29.15); see RFC 5280.
       */
      key_usage?: {
        /**
         * Indicates if the keyEncipherment bit(2) is set.
         */
        key_encipherment?: boolean;
        /**
         * Indicates if the digitalSignature bit(0) is set.
         */
        digital_signature?: boolean;
        /**
         * Indicates if the encipherOnly bit(7) is set.
         */
        decipher_only?: boolean;
        /**
         * Indicates if the keyAgreement bit(4) is set.
         */
        key_agreement?: boolean;
        /**
         * Indicates if the dataEncipherment bit(3) is set.
         */
        data_encipherment?: boolean;
        /**
         * Integer value of the bitmask in the extension
         */
        value?: string;
        /**
         * Indicates if the decipherOnly bit(8) is set.
         */
        encipher_only?: boolean;
        /**
         * Indicates if the keyCertSign bit(5) is set.
         */
        certificate_sign?: boolean;
        /**
         * Indicates if the contentCommitment bit(1) (formerly called nonRepudiation) is set.
         */
        content_commitment?: boolean;
        /**
         * Indicates if the cRLSign bit(6) is set.
         */
        crl_sign?: boolean;
        [k: string]: unknown;
      };
      /**
       * The parsed Certificate Transparency SignedCertificateTimestampsList extension (1.3.6.1.4.1.11129.2.4.2); see RFC 6962.
       */
      signed_certificate_timestamps?: {
        /**
         * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
         */
        log_id?: string;
        /**
         * Time at which the SCT was issued (in seconds since the Unix epoch).
         */
        timestamp?: string;
        /**
         * Version of the protocol to which the SCT conforms.
         */
        version?: string;
        /**
         * For future extensions to the protocol.
         */
        extensions?: string;
        /**
         * The log's signature for this SCT.
         */
        signature?: string;
        [k: string]: unknown;
      };
      /**
       * This is true if the certificate possesses the Certificate Transparency Precertificate Poison extension (1.3.6.1.4.1.11129.2.4.3).
       */
      ct_poison?: boolean;
      /**
       * A key identifier, usually a digest of the DER encoding of a SubjectPublicKeyInfo. This is the hex encoding of the OCTET STRING value.
       */
      subject_key_id?: string;
      /**
       * The parsed Issuer Alternative Name extension (id-ce-issuerAltName, 2.5.29.18).
       */
      issuer_alt_name?: {
        /**
         * uniformResourceIdentifier entries in the GeneralName (CHOICE tag 6).
         */
        uniform_resource_identifiers?: string;
        /**
         * Parsed directoryName entries in the GeneralName (CHOICE tag 4).
         */
        directory_names?: {
          /**
           * jurisdictionCountry elements of the distinguished name (OBJECT IDENTIFIER 1.3.6.1.4.1.311.60.2.1.3)
           */
          jurisdiction_country?: string;
          /**
           * stateOrProviceName (ST) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.8)
           */
          province?: string;
          /**
           * surname (SN) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.4)
           */
          surname?: string;
          /**
           * localityName (L) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.7)
           */
          locality?: string;
          /**
           * domainComponent (DC) elements of the distinguished name (OBJECT IDENTIFIER 0.9.2342.19200300.100.1.25)
           */
          domain_component?: string;
          /**
           * countryName (C) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.6)
           */
          country?: string;
          /**
           * jurisdictionStateOrProvice elements of the distinguished name (OBJECT IDENTIFIER 1.3.6.1.4.1.311.60.2.1.2)
           */
          jurisdiction_province?: string;
          /**
           * jurisdictionLocality elements of the distinguished name (OBJECT IDENTIFIER 1.3.6.1.4.1.311.60.2.1.1)
           */
          jurisdiction_locality?: string;
          /**
           * postalCode elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.17)
           */
          postal_code?: string;
          /**
           * organizationId elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.97)
           */
          organization_id?: string;
          /**
           * organizationalUnit (OU) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.11)
           */
          organizational_unit?: string;
          /**
           * givenName (G) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.42)
           */
          given_name?: string;
          /**
           * serialNumber elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.5)
           */
          serial_number?: string;
          /**
           * commonName (CN) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.3)
           */
          common_name?: string;
          /**
           * organizationName (O) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.10)
           */
          organization?: string;
          /**
           * emailAddress (E) elements of the distinguished name (OBJECT IDENTIFIER 1.2.840.113549.1.9.1)
           */
          email_address?: string;
          /**
           * streetAddress (STREET) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.9)
           */
          street_address?: string;
          [k: string]: unknown;
        };
        /**
         * iPAddress entries in the GeneralName (CHOICE tag 7).
         */
        ip_addresses?: string;
        /**
         * otherName entries in the GeneralName (CHOICE tag 0). An arbitrary binary value identified by an OBJECT IDENTIFIER.
         */
        other_names?: {
          /**
           * The OBJECT IDENTIFIER identifying the syntax of the otherName value.
           */
          id?: string;
          /**
           * The raw otherName value.
           */
          value?: string;
          [k: string]: unknown;
        };
        /**
         * registeredID entries in the GeneralName (OBJECT IDENTIFIER, CHOICE tag 8). Stored in dotted-decimal format.
         */
        registered_ids?: string;
        /**
         * Parsed eDIPartyName entries in the GeneralName (CHOICE tag 5)
         */
        edi_party_names?: {
          /**
           * The partyName (a DirectoryString)
           */
          party_name?: string;
          /**
           * The nameAssigner (a DirectoryString)
           */
          name_assigner?: string;
          [k: string]: unknown;
        };
        /**
         * dNSName entries in the GeneralName (IA5String, CHOICE tag 2).
         */
        dns_names?: string;
        /**
         * rfc822Name entries in the GeneralName (IA5String, CHOICE tag 1).
         */
        email_addresses?: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    /**
     * A list of subject names in the certificate, including the Subject CommonName and SubjectAltName DNSNames, IPAddresses and URIs.
     */
    names?: string;
    signature?: {
      /**
       * Indicates whether the subject key was also used to sign the certificate.
       */
      self_signed?: boolean;
      valid?: boolean;
      /**
       * Contents of the signature BIT STRING.
       */
      value?: string;
      signature_algorithm?: {
        /**
         * The OBJECT IDENTIFIER of the signature algorithm, in dotted-decimal notation.
         */
        oid?: string;
        /**
         * Name of signature algorithm, e.g., SHA1-RSA or ECDSA-SHA512. Unknown algorithms get an integer id.
         */
        name?: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    /**
     * How the certificate is validated -- Domain validated (DV), Organization Validated (OV), Extended Validation (EV), or unknown.
     */
    validation_level?: string;
    /**
     * Serial number as an signed decimal integer. Stored as string to support >uint lengths. Negative values are allowed.
     */
    serial_number?: string;
    /**
     * The MD5 digest over the DER encoding of the certificate, as a hexadecimal string.
     */
    fingerprint_md5?: string;
    /**
     * The parsed subject name.
     */
    subject?: {
      /**
       * jurisdictionCountry elements of the distinguished name (OBJECT IDENTIFIER 1.3.6.1.4.1.311.60.2.1.3)
       */
      jurisdiction_country?: string;
      /**
       * stateOrProviceName (ST) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.8)
       */
      province?: string;
      /**
       * surname (SN) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.4)
       */
      surname?: string;
      /**
       * localityName (L) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.7)
       */
      locality?: string;
      /**
       * domainComponent (DC) elements of the distinguished name (OBJECT IDENTIFIER 0.9.2342.19200300.100.1.25)
       */
      domain_component?: string;
      /**
       * countryName (C) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.6)
       */
      country?: string;
      /**
       * jurisdictionStateOrProvice elements of the distinguished name (OBJECT IDENTIFIER 1.3.6.1.4.1.311.60.2.1.2)
       */
      jurisdiction_province?: string;
      /**
       * jurisdictionLocality elements of the distinguished name (OBJECT IDENTIFIER 1.3.6.1.4.1.311.60.2.1.1)
       */
      jurisdiction_locality?: string;
      /**
       * postalCode elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.17)
       */
      postal_code?: string;
      /**
       * organizationId elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.97)
       */
      organization_id?: string;
      /**
       * organizationalUnit (OU) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.11)
       */
      organizational_unit?: string;
      /**
       * givenName (G) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.42)
       */
      given_name?: string;
      /**
       * serialNumber elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.5)
       */
      serial_number?: string;
      /**
       * commonName (CN) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.3)
       */
      common_name?: string;
      /**
       * organizationName (O) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.10)
       */
      organization?: string;
      /**
       * emailAddress (E) elements of the distinguished name (OBJECT IDENTIFIER 1.2.840.113549.1.9.1)
       */
      email_address?: string;
      /**
       * streetAddress (STREET) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.9)
       */
      street_address?: string;
      [k: string]: unknown;
    };
    /**
     * The SHA2-256 digest over the DER encoding of the certificate's SubjectPublicKeyInfo, as a hexadecimal string.
     */
    spki_subject_fingerprint?: string;
    validity?: {
      /**
       * Timestamp of when certificate is first valid. Timezone is UTC.
       */
      start?: string;
      /**
       * The length of time, in seconds, that the certificate is valid.
       */
      length?: string;
      /**
       * Timestamp of when certificate expires. Timezone is UTC.
       */
      end?: string;
      [k: string]: unknown;
    };
    /**
     * The parsed issuer name.
     */
    issuer?: {
      /**
       * jurisdictionCountry elements of the distinguished name (OBJECT IDENTIFIER 1.3.6.1.4.1.311.60.2.1.3)
       */
      jurisdiction_country?: string;
      /**
       * stateOrProviceName (ST) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.8)
       */
      province?: string;
      /**
       * surname (SN) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.4)
       */
      surname?: string;
      /**
       * localityName (L) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.7)
       */
      locality?: string;
      /**
       * domainComponent (DC) elements of the distinguished name (OBJECT IDENTIFIER 0.9.2342.19200300.100.1.25)
       */
      domain_component?: string;
      /**
       * countryName (C) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.6)
       */
      country?: string;
      /**
       * jurisdictionStateOrProvice elements of the distinguished name (OBJECT IDENTIFIER 1.3.6.1.4.1.311.60.2.1.2)
       */
      jurisdiction_province?: string;
      /**
       * jurisdictionLocality elements of the distinguished name (OBJECT IDENTIFIER 1.3.6.1.4.1.311.60.2.1.1)
       */
      jurisdiction_locality?: string;
      /**
       * postalCode elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.17)
       */
      postal_code?: string;
      /**
       * organizationId elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.97)
       */
      organization_id?: string;
      /**
       * organizationalUnit (OU) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.11)
       */
      organizational_unit?: string;
      /**
       * givenName (G) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.42)
       */
      given_name?: string;
      /**
       * serialNumber elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.5)
       */
      serial_number?: string;
      /**
       * commonName (CN) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.3)
       */
      common_name?: string;
      /**
       * organizationName (O) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.10)
       */
      organization?: string;
      /**
       * emailAddress (E) elements of the distinguished name (OBJECT IDENTIFIER 1.2.840.113549.1.9.1)
       */
      email_address?: string;
      /**
       * streetAddress (STREET) elements of the distinguished name (OBJECT IDENTIFIER 2.5.4.9)
       */
      street_address?: string;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  metadata?: {
    post_processed_at?: string;
    post_processed?: boolean;
    parse_status?: string;
    seen_in_scan?: boolean;
    updated_at?: string;
    added_at?: string;
    source?: string;
    parse_version?: string;
    parse_error?: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
