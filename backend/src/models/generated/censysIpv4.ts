/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, run "npm run codegen" to regenerate this file.
 */

export interface CensysIpv4Data {
  p11211?: {
    memcached?: {
      banner?: {
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          certificate?: {
            fingerprints?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's SubjectPublicKeyInfo, as a hexadecimal string.
               */
              spki_subject?: string;
              /**
               * The SHA1 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha1?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, as a hexadecimal string.
               */
              tbs?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, *with any CT extensions omitted*, as a hexadecimal string.
               */
              tbs_noct?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha256?: string;
              /**
               * The MD5 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              md5?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          chain?: {
            fingerprints?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's SubjectPublicKeyInfo, as a hexadecimal string.
               */
              spki_subject?: string;
              /**
               * The SHA1 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha1?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, as a hexadecimal string.
               */
              tbs?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, *with any CT extensions omitted*, as a hexadecimal string.
               */
              tbs_noct?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha256?: string;
              /**
               * The MD5 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              md5?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * All server stats, formatted 'key=value key2=value2'
         */
        stats?: string;
        /**
         * What protocol the scanner used when connecting to the server (tcp/tls/udp)
         */
        connected_on?: string;
        /**
         * Is the server willing to use the binary protocol to communicate
         */
        binary_protocol_running?: boolean;
        /**
         * If true, Memcached was detected on this machine.
         */
        supported?: boolean;
        /**
         * Is SASL running on the server
         */
        sasl_enabled?: boolean;
        /**
         * Is the server willing to use the ascii protocol to communicate
         */
        ascii_protocol_running?: boolean;
        /**
         * Memcached version
         */
        version?: string;
        /**
         * libevent version being used by the server
         */
        libevent?: string;
        /**
         * Server responds to UDP
         */
        responds_to_udp?: boolean;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p20000?: {
    dnp3?: {
      status?: {
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        support?: boolean;
        raw_response?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p3306?: {
    mysql?: {
      banner?: {
        /**
         * If the server allows upgrading the session to use TLS, this is the log of the handshake.
         */
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          /**
           * The server's TLS certificate.
           */
          certificate?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * Additional certificates provided by the server.
           */
          chain?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * If true, MySQL was detected on this machine.
         */
        supported?: boolean;
        /**
         * Optional string describing the error. Only set if there is an error.
         */
        error_message?: string;
        /**
         * The set of capability flags the server returned in the initial HandshakePacket. Each entry corresponds to a bit being set in the flags; key names correspond to the #defines in the MySQL docs.
         */
        capability_flags?: {
          CLIENT_IGNORE_SPACE?: boolean;
          CLIENT_RESERVED?: boolean;
          CLIENT_PLUGIN_AUTH?: boolean;
          CLIENT_INTERACTIVE?: boolean;
          CLIENT_SECURE_CONNECTION?: boolean;
          CLIENT_MULTI_RESULTS?: boolean;
          CLIENT_CONNECT_ATTRS?: boolean;
          CLIENT_IGNORE_SIGPIPE?: boolean;
          CLIENT_TRANSACTIONS?: boolean;
          CLIENT_NO_SCHEMA?: boolean;
          CLIENT_LONG_FLAG?: boolean;
          CLIENT_CONNECT_WITH_DB?: boolean;
          CLIENT_SSL?: boolean;
          CLIENT_FOUND_ROWS?: boolean;
          CLIENT_COMPRESS?: boolean;
          CLIENT_LOCAL_FILES?: boolean;
          CLIENT_ODBC?: boolean;
          CLIENT_PLUGIN_AUTH_LEN_ENC_CLIENT_DATA?: boolean;
          CLIENT_LONG_PASSWORD?: boolean;
          CLIENT_MULTI_STATEMENTS?: boolean;
          CLIENT_SESSION_TRACK?: boolean;
          CLIENT_PS_MULTI_RESULTS?: boolean;
          CLIENT_PROTOCOL_41?: boolean;
          CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS?: boolean;
          CLIENT_DEPRECATED_EOF?: boolean;
          [k: string]: unknown;
        };
        /**
         * The set of status flags the server returned in the initial HandshakePacket. Each entry corresponds to a bit being set in the flags; key names correspond to the #defines in the MySQL docs.
         */
        status_flags?: {
          SERVER_STATUS_DB_DROPPED?: boolean;
          SERVER_STATUS_IN_TRANS_READONLY?: boolean;
          SERVER_STATUS_CURSOR_EXISTS?: boolean;
          SERVER_SESSION_STATE_CHANGED?: boolean;
          SERVER_QUERY_NO_INDEX_USED?: boolean;
          SERVER_STATUS_IN_TRANS?: boolean;
          SERVER_QUERY_NO_GOOD_INDEX_USED?: boolean;
          SERVER_MORE_RESULTS_EXISTS?: boolean;
          SERVER_STATUS_NO_BACKSLASH_ESCAPES?: boolean;
          SERVER_PS_OUT_PARAMS?: boolean;
          SERVER_STATUS_METADATA_CHANGED?: boolean;
          SERVER_STATUS_AUTOCOMMIT?: boolean;
          SERVER_STATUS_LAST_ROW_SENT?: boolean;
          SERVER_QUERY_WAS_SLOW?: boolean;
          [k: string]: unknown;
        };
        /**
         * 8-bit unsigned integer representing the server's protocol version sent in the initial HandshakePacket from the server.
         */
        protocol_version?: string;
        /**
         * The friendly name for the error code as defined at https://dev.mysql.com/doc/refman/8.0/en/error-messages-server.html, or UNKNOWN.
         */
        error_id?: string;
        /**
         * Only set if there is an error returned by the server, for example if the scanner is not on the allowed hosts list.
         */
        error_code?: string;
        /**
         * The specific server version returned in the initial HandshakePacket. Often in the form x.y.z, but not always.
         */
        server_version?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p161?: {
    snmp?: {
      banner?: {
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          certificate?: {
            fingerprints?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's SubjectPublicKeyInfo, as a hexadecimal string.
               */
              spki_subject?: string;
              /**
               * The SHA1 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha1?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, as a hexadecimal string.
               */
              tbs?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, *with any CT extensions omitted*, as a hexadecimal string.
               */
              tbs_noct?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha256?: string;
              /**
               * The MD5 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              md5?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          chain?: {
            fingerprints?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's SubjectPublicKeyInfo, as a hexadecimal string.
               */
              spki_subject?: string;
              /**
               * The SHA1 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha1?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, as a hexadecimal string.
               */
              tbs?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, *with any CT extensions omitted*, as a hexadecimal string.
               */
              tbs_noct?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha256?: string;
              /**
               * The MD5 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              md5?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * If true, SNMP was detected on this machine.
         */
        supported?: boolean;
        /**
         * 1.3.6.1.2.1.1 - System Variables
         */
        oid_system?: {
          /**
           * 1.3.6.1.2.1.1.3 - 1/100ths of sec
           */
          uptime?: string;
          /**
           * 1.3.6.1.2.1.1.5 - Name, usually FQDN
           */
          name?: string;
          /**
           * 1.3.6.1.2.1.1.1 - Description of entity
           */
          descr?: string;
          /**
           * 1.3.6.1.2.1.1.2 - Vendor ID
           */
          object_id?: string;
          /**
           * 1.3.6.1.2.1.1.4 - Contact info
           */
          contact?: string;
          /**
           * 1.3.6.1.2.1.1.6 - Physical location
           */
          location?: string;
          /**
           * 1.3.6.1.2.1.1.7 - Set of services offered by entity
           */
          services?: {
            /**
             * Physical (e.g. repeaters)
             */
            layer_1?: boolean;
            /**
             * Internet (e.g. IP gateways)
             */
            layer_3?: boolean;
            /**
             * Datalink/subnetwork (e.g. bridges)
             */
            layer_2?: boolean;
            /**
             * OSI layer 5
             */
            layer_5?: boolean;
            /**
             * End-to-end (e.g. IP hosts)
             */
            layer_4?: boolean;
            /**
             * Applications (e.g. mail relays)
             */
            layer_7?: boolean;
            /**
             * OSI layer 6
             */
            layer_6?: boolean;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * 1.3.6.1.2.1.47.1.1.1.1 - Entity Physical
         */
        oid_physical?: {
          /**
           * 1.3.6.1.2.1.47.1.1.1.1.12 - Name of mfg
           */
          manufacturer_name?: string;
          /**
           * 1.3.6.1.2.1.47.1.1.1.1.9 - Firmware revision string
           */
          firmware_rev?: string;
          /**
           * 1.3.6.1.2.1.47.1.1.1.1.10 - Software revision string
           */
          software_rev?: string;
          /**
           * 1.3.6.1.2.1.47.1.1.1.1.11 - Serial number string
           */
          serial_number?: string;
          /**
           * 1.3.6.1.2.1.47.1.1.1.1.8 - Hardware revision string
           */
          hardware_rev?: string;
          /**
           * 1.3.6.1.2.1.47.1.1.1.1.13 - Model name of component
           */
          model_name?: string;
          /**
           * 1.3.6.1.2.1.47.1.1.1.1.7 - Entity name
           */
          name?: string;
          [k: string]: unknown;
        };
        /**
         * 1.3.6.1.2.1.2 - Interfaces
         */
        oid_interfaces?: {
          /**
           * 1.3.6.1.2.1.2.1 - Number of network interfaces
           */
          num_interfaces?: string;
          [k: string]: unknown;
        };
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p80?: {
    http?: {
      get?: {
        /**
         * The HTTP body, truncated according to configured MaxSize (default 256kb).
         */
        body?: string;
        /**
         * HTTP response headers. Names are normalized by converting them to lowercase and replacing hyphens with underscores. When a header is returned multiple times, only the first is included. Values are truncated to 256 bytes.
         */
        headers?: {
          /**
           * The value of the content_length header.
           */
          content_length?: string;
          /**
           * The value of the x-ua-compatible header.
           */
          x_ua_compatible?: string;
          /**
           * The value of the via header.
           */
          via?: string;
          /**
           * The value of the pragma header.
           */
          pragma?: string;
          /**
           * The value of the set_cookie header.
           */
          set_cookie?: string;
          /**
           * The value of the x-powered-by header.
           */
          x_powered_by?: string;
          /**
           * The value of the vary header.
           */
          vary?: string;
          /**
           * The value of the retry_after header.
           */
          retry_after?: string;
          /**
           * The value of the www-authenticate header.
           */
          www_authenticate?: string;
          /**
           * The value of the warning header.
           */
          warning?: string;
          /**
           * The value of the content_language header.
           */
          content_language?: string;
          /**
           * The value of the content_location header.
           */
          content_location?: string;
          /**
           * The value of the p3p header.
           */
          p3p?: string;
          /**
           * The value of the server header.
           */
          server?: string;
          /**
           * The value of the proxy-authenticate header.
           */
          proxy_authenticate?: string;
          /**
           * The value of the proxy-agent header.
           */
          proxy_agent?: string;
          /**
           * The value of the upgrade header.
           */
          upgrade?: string;
          /**
           * Other headers are included as a list of key, value pairs.
           */
          unknown?: {
            value?: string;
            key?: string;
            [k: string]: unknown;
          };
          /**
           * The value of the x-content-type-options header.
           */
          x_content_type_options?: string;
          /**
           * The value of the x-content-security-policy header.
           */
          x_content_security_policy?: string;
          /**
           * The value of the etag header.
           */
          etag?: string;
          /**
           * The value of the content_range header.
           */
          content_range?: string;
          /**
           * The value of the content_encoding header.
           */
          content_encoding?: string;
          /**
           * The value of the access-control-allow-origin header.
           */
          access_control_allow_origin?: string;
          /**
           * The value of the content_md5 header.
           */
          content_md5?: string;
          /**
           * The value of the content_disposition header.
           */
          content_disposition?: string;
          /**
           * The value of the cache_control header.
           */
          cache_control?: string;
          /**
           * The value of the location header.
           */
          location?: string;
          /**
           * The value of the status header.
           */
          status?: string;
          /**
           * The value of the strict-transport-security header.
           */
          strict_transport_security?: string;
          /**
           * The value of the expires header.
           */
          expires?: string;
          /**
           * The value of the accept-patch header.
           */
          accept_patch?: string;
          /**
           * The value of the last_modified header.
           */
          last_modified?: string;
          /**
           * The value of the link header.
           */
          link?: string;
          /**
           * The value of the content_type header.
           */
          content_type?: string;
          /**
           * The value of the date header.
           */
          date?: string;
          /**
           * The value of the x-frame-options header.
           */
          x_frame_options?: string;
          /**
           * The value of the x-webkit-csp header.
           */
          x_webkit_csp?: string;
          /**
           * The value of the x-real-ip header.
           */
          x_real_ip?: string;
          /**
           * The value of the alternate_protocol header.
           */
          alternate_protocol?: string;
          /**
           * The value of the accept-ranges header.
           */
          accept_ranges?: string;
          /**
           * The value of the age header.
           */
          age?: string;
          /**
           * The value of the x-xss-protection header.
           */
          x_xss_protection?: string;
          /**
           * The value of the x-forwarded-for header.
           */
          x_forwarded_for?: string;
          /**
           * The value of the refresh header.
           */
          refresh?: string;
          /**
           * The value of the public-key-pins header.
           */
          public_key_pins?: string;
          /**
           * The value of the connection header.
           */
          connection?: string;
          /**
           * The value of the x-content-duration header.
           */
          x_content_duration?: string;
          /**
           * The value of the alt-svc header.
           */
          alt_svc?: string;
          /**
           * The value of the allow header.
           */
          allow?: string;
          /**
           * The value of the referer header.
           */
          referer?: string;
          /**
           * The value of the content-security-policy header.
           */
          content_security_policy?: string;
          /**
           * The value of the transfer_encoding header.
           */
          transfer_encoding?: string;
          /**
           * The value of the trailer header.
           */
          trailer?: string;
          [k: string]: unknown;
        };
        /**
         * The HTTP status code (e.g. 200, 404, 503).
         */
        status_code?: string;
        /**
         * The contents of the first TITLE tag in the body (stripped of any surrounding whitespace and truncated to 1024 characters).
         */
        title?: string;
        /**
         * The full status line returned by the server (e.g. "200 OK" or "401 UNAUTHORIZED")
         */
        status_line?: string;
        /**
         * The SHA2-256 digest of the body. NOTE: This digest is calculated using the same data returned in the body field, so if that was truncated, this will be calculated over the truncated body, rather than full data stored on the server.
         */
        body_sha256?: string;
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  updated_at?: string;
  p1900?: {
    upnp?: {
      discovery?: {
        x_user_agent?: string;
        usn?: string;
        agent?: string;
        server?: string;
        ext?: string;
        location?: string;
        st?: string;
        cache_control?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p25?: {
    smtp?: {
      starttls?: {
        /**
         * The response to the EHLO command.
         */
        ehlo?: string;
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          /**
           * The server's TLS certificate.
           */
          certificate?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * Additional certificates provided by the server.
           */
          chain?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * The response to the STARTTLS command.
         */
        starttls?: string;
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        /**
         * The initial SMTP command sent by the server (e.g. "220 localhost.localdomain ESMTP Postfix (Ubuntu)\r\n"
         */
        banner?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p2323?: {
    telnet?: {
      banner?: {
        /**
         * The server refuses to perform the listed options, see https://tools.ietf.org/html/rfc854.
         */
        wont?: {
          /**
           * The friendly name of the telnet option.
           */
          name?: string;
          /**
           * The integer value of the telnet option.
           */
          value?: string;
          [k: string]: unknown;
        };
        /**
         * The server requests the client to perform the listed options, see https://tools.ietf.org/html/rfc854.
         */
        do?: {
          /**
           * The friendly name of the telnet option.
           */
          name?: string;
          /**
           * The integer value of the telnet option.
           */
          value?: string;
          [k: string]: unknown;
        };
        /**
         * The server requests the client not perform the listed options, see https://tools.ietf.org/html/rfc854.
         */
        dont?: {
          /**
           * The friendly name of the telnet option.
           */
          name?: string;
          /**
           * The integer value of the telnet option.
           */
          value?: string;
          [k: string]: unknown;
        };
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        /**
         * Indicates whether the server supports telnet.
         */
        support?: boolean;
        /**
         * The server will perform (or is performing) the listed options, see https://tools.ietf.org/html/rfc854.
         */
        will?: {
          /**
           * The friendly name of the telnet option.
           */
          name?: string;
          /**
           * The integer value of the telnet option.
           */
          value?: string;
          [k: string]: unknown;
        };
        /**
         * The banner sent by the server after negotiating the connection options. Truncated at 8kb.
         */
        banner?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  zdb_version?: string;
  /**
   * Integer value of IP address in host order
   */
  ipint?: string;
  p21?: {
    ftp?: {
      banner?: {
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        /**
         * The banner returned by the FTP server (zero or more lines, followed by three decimal digits and optionally a human readable command followed by a final LF, see https://tools.ietf.org/html/rfc354
         */
        banner?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p8888?: {
    http?: {
      get?: {
        /**
         * The HTTP body, truncated according to configured MaxSize (default 256kb).
         */
        body?: string;
        /**
         * HTTP response headers. Names are normalized by converting them to lowercase and replacing hyphens with underscores. When a header is returned multiple times, only the first is included. Values are truncated to 256 bytes.
         */
        headers?: {
          /**
           * The value of the content_length header.
           */
          content_length?: string;
          /**
           * The value of the x-ua-compatible header.
           */
          x_ua_compatible?: string;
          /**
           * The value of the via header.
           */
          via?: string;
          /**
           * The value of the pragma header.
           */
          pragma?: string;
          /**
           * The value of the set_cookie header.
           */
          set_cookie?: string;
          /**
           * The value of the x-powered-by header.
           */
          x_powered_by?: string;
          /**
           * The value of the vary header.
           */
          vary?: string;
          /**
           * The value of the retry_after header.
           */
          retry_after?: string;
          /**
           * The value of the www-authenticate header.
           */
          www_authenticate?: string;
          /**
           * The value of the warning header.
           */
          warning?: string;
          /**
           * The value of the content_language header.
           */
          content_language?: string;
          /**
           * The value of the content_location header.
           */
          content_location?: string;
          /**
           * The value of the p3p header.
           */
          p3p?: string;
          /**
           * The value of the server header.
           */
          server?: string;
          /**
           * The value of the proxy-authenticate header.
           */
          proxy_authenticate?: string;
          /**
           * The value of the proxy-agent header.
           */
          proxy_agent?: string;
          /**
           * The value of the upgrade header.
           */
          upgrade?: string;
          /**
           * Other headers are included as a list of key, value pairs.
           */
          unknown?: {
            value?: string;
            key?: string;
            [k: string]: unknown;
          };
          /**
           * The value of the x-content-type-options header.
           */
          x_content_type_options?: string;
          /**
           * The value of the x-content-security-policy header.
           */
          x_content_security_policy?: string;
          /**
           * The value of the etag header.
           */
          etag?: string;
          /**
           * The value of the content_range header.
           */
          content_range?: string;
          /**
           * The value of the content_encoding header.
           */
          content_encoding?: string;
          /**
           * The value of the access-control-allow-origin header.
           */
          access_control_allow_origin?: string;
          /**
           * The value of the content_md5 header.
           */
          content_md5?: string;
          /**
           * The value of the content_disposition header.
           */
          content_disposition?: string;
          /**
           * The value of the cache_control header.
           */
          cache_control?: string;
          /**
           * The value of the location header.
           */
          location?: string;
          /**
           * The value of the status header.
           */
          status?: string;
          /**
           * The value of the strict-transport-security header.
           */
          strict_transport_security?: string;
          /**
           * The value of the expires header.
           */
          expires?: string;
          /**
           * The value of the accept-patch header.
           */
          accept_patch?: string;
          /**
           * The value of the last_modified header.
           */
          last_modified?: string;
          /**
           * The value of the link header.
           */
          link?: string;
          /**
           * The value of the content_type header.
           */
          content_type?: string;
          /**
           * The value of the date header.
           */
          date?: string;
          /**
           * The value of the x-frame-options header.
           */
          x_frame_options?: string;
          /**
           * The value of the x-webkit-csp header.
           */
          x_webkit_csp?: string;
          /**
           * The value of the x-real-ip header.
           */
          x_real_ip?: string;
          /**
           * The value of the alternate_protocol header.
           */
          alternate_protocol?: string;
          /**
           * The value of the accept-ranges header.
           */
          accept_ranges?: string;
          /**
           * The value of the age header.
           */
          age?: string;
          /**
           * The value of the x-xss-protection header.
           */
          x_xss_protection?: string;
          /**
           * The value of the x-forwarded-for header.
           */
          x_forwarded_for?: string;
          /**
           * The value of the refresh header.
           */
          refresh?: string;
          /**
           * The value of the public-key-pins header.
           */
          public_key_pins?: string;
          /**
           * The value of the connection header.
           */
          connection?: string;
          /**
           * The value of the x-content-duration header.
           */
          x_content_duration?: string;
          /**
           * The value of the alt-svc header.
           */
          alt_svc?: string;
          /**
           * The value of the allow header.
           */
          allow?: string;
          /**
           * The value of the referer header.
           */
          referer?: string;
          /**
           * The value of the content-security-policy header.
           */
          content_security_policy?: string;
          /**
           * The value of the transfer_encoding header.
           */
          transfer_encoding?: string;
          /**
           * The value of the trailer header.
           */
          trailer?: string;
          [k: string]: unknown;
        };
        /**
         * The HTTP status code (e.g. 200, 404, 503).
         */
        status_code?: string;
        /**
         * The contents of the first TITLE tag in the body (stripped of any surrounding whitespace and truncated to 1024 characters).
         */
        title?: string;
        /**
         * The full status line returned by the server (e.g. "200 OK" or "401 UNAUTHORIZED")
         */
        status_line?: string;
        /**
         * The SHA2-256 digest of the body. NOTE: This digest is calculated using the same data returned in the body field, so if that was truncated, this will be calculated over the truncated body, rather than full data stored on the server.
         */
        body_sha256?: string;
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p23?: {
    telnet?: {
      banner?: {
        /**
         * The server refuses to perform the listed options, see https://tools.ietf.org/html/rfc854.
         */
        wont?: {
          /**
           * The friendly name of the telnet option.
           */
          name?: string;
          /**
           * The integer value of the telnet option.
           */
          value?: string;
          [k: string]: unknown;
        };
        /**
         * The server requests the client to perform the listed options, see https://tools.ietf.org/html/rfc854.
         */
        do?: {
          /**
           * The friendly name of the telnet option.
           */
          name?: string;
          /**
           * The integer value of the telnet option.
           */
          value?: string;
          [k: string]: unknown;
        };
        /**
         * The server requests the client not perform the listed options, see https://tools.ietf.org/html/rfc854.
         */
        dont?: {
          /**
           * The friendly name of the telnet option.
           */
          name?: string;
          /**
           * The integer value of the telnet option.
           */
          value?: string;
          [k: string]: unknown;
        };
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        /**
         * Indicates whether the server supports telnet.
         */
        support?: boolean;
        /**
         * The server will perform (or is performing) the listed options, see https://tools.ietf.org/html/rfc854.
         */
        will?: {
          /**
           * The friendly name of the telnet option.
           */
          name?: string;
          /**
           * The integer value of the telnet option.
           */
          value?: string;
          [k: string]: unknown;
        };
        /**
         * The banner sent by the server after negotiating the connection options. Truncated at 8kb.
         */
        banner?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p22?: {
    ssh?: {
      v2?: {
        /**
         * See https://tools.ietf.org/html/rfc4253#section-7
         */
        key_exchange?: {
          curve25519_sha256_params?: {
            server_public?: string;
            client_public?: string;
            client_private?: string;
            [k: string]: unknown;
          };
          /**
           * Parameters for the Diffie-Hellman key exchange.
           */
          dh_params?: {
            /**
             * The shared prime number.
             */
            prime?: {
              /**
               * The length of the parameter.
               */
              length?: string;
              /**
               * The value of the parameter.
               */
              value?: string;
              [k: string]: unknown;
            };
            /**
             * The server's public key.
             */
            server_public?: {
              /**
               * The length of the parameter.
               */
              length?: string;
              /**
               * The value of the parameter.
               */
              value?: string;
              [k: string]: unknown;
            };
            /**
             * The generator of the DH group.
             */
            generator?: {
              /**
               * The length of the parameter.
               */
              length?: string;
              /**
               * The value of the parameter.
               */
              value?: string;
              [k: string]: unknown;
            };
            /**
             * The client's private key. Usually does not coexist with server_private.
             */
            client_private?: {
              /**
               * The length of the parameter.
               */
              length?: string;
              /**
               * The value of the parameter.
               */
              value?: string;
              [k: string]: unknown;
            };
            /**
             * The server's private key. Usually does not coexist with client_private.
             */
            server_private?: {
              /**
               * The length of the parameter.
               */
              length?: string;
              /**
               * The value of the parameter.
               */
              value?: string;
              [k: string]: unknown;
            };
            /**
             * The client's public key.
             */
            client_public?: {
              /**
               * The length of the parameter.
               */
              length?: string;
              /**
               * The value of the parameter.
               */
              value?: string;
              [k: string]: unknown;
            };
            /**
             * The session key.
             */
            session_key?: {
              /**
               * The length of the parameter.
               */
              length?: string;
              /**
               * The value of the parameter.
               */
              value?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * Parameters for ECDH key exchange.
           */
          ecdh_params?: {
            /**
             * An elliptic curve point.
             */
            server_public?: {
              /**
               * Generic parameter for a cryptographic algorithm.
               */
              y?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * Generic parameter for a cryptographic algorithm.
               */
              x?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * An elliptic curve algorithm identifier.
             */
            curve_id?: {
              /**
               * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
               */
              id?: string;
              /**
               * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
               */
              name?: string;
              [k: string]: unknown;
            };
            /**
             * TLS key exchange parameters for ECDH keys.
             */
            server_private?: {
              length?: string;
              value?: string;
              [k: string]: unknown;
            };
            /**
             * An elliptic curve point.
             */
            client_public?: {
              /**
               * Generic parameter for a cryptographic algorithm.
               */
              y?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * Generic parameter for a cryptographic algorithm.
               */
              x?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * TLS key exchange parameters for ECDH keys.
             */
            client_private?: {
              length?: string;
              value?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        /**
         * Supported options advertised by the server during key exchange algorithm negotiation. See https://tools.ietf.org/html/rfc4253#section-7
         */
        support?: {
          /**
           * An ssh public key algorithm identifier, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-19 for standard values.
           */
          host_key_algorithms?: string;
          /**
           * Indicates whether a guessed key exchange packet follows, see https://tools.ietf.org/html/rfc4253#section-7.1.
           */
          first_kex_follows?: boolean;
          /**
           * An ssh key exchange algorithm identifier, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-15 for standard values.
           */
          kex_algorithms?: string;
          /**
           * Server's supported settings for communications flowing from the server to the client. See https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml
           */
          server_to_client?: {
            /**
             * A name-list of language tags in order of preference.
             */
            languages?: string;
            /**
             * An ssh cipher algorithm identifier, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-16 for standard values.
             */
            ciphers?: string;
            /**
             * An ssh MAC algorithm identifier, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-18 for standard values.
             */
            macs?: string;
            /**
             * An ssh compression algorithm identifier, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-20 for standard values.
             */
            compressions?: string;
            [k: string]: unknown;
          };
          /**
           * Server's supported settings for communications flowing from the client to the server. See https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml
           */
          client_to_server?: {
            /**
             * A name-list of language tags in order of preference.
             */
            languages?: string;
            /**
             * An ssh cipher algorithm identifier, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-16 for standard values.
             */
            ciphers?: string;
            /**
             * An ssh MAC algorithm identifier, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-18 for standard values.
             */
            macs?: string;
            /**
             * An ssh compression algorithm identifier, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-20 for standard values.
             */
            compressions?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        selected?: {
          /**
           * The selected host key algorithm
           */
          host_key_algorithm?: string;
          /**
           * The selected key exchange algorithm
           */
          kex_algorithm?: string;
          server_to_client?: {
            /**
             * An ssh MAC algorithm identifier, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-18 for standard values.
             */
            mac?: string;
            /**
             * An ssh cipher algorithm identifier, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-16 for standard values.
             */
            cipher?: string;
            /**
             * An ssh compression algorithm identifier, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-20 for standard values.
             */
            compression?: string;
            [k: string]: unknown;
          };
          client_to_server?: {
            /**
             * An ssh MAC algorithm identifier, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-18 for standard values.
             */
            mac?: string;
            /**
             * An ssh cipher algorithm identifier, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-16 for standard values.
             */
            cipher?: string;
            /**
             * An ssh compression algorithm identifier, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-20 for standard values.
             */
            compression?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        server_host_key?: {
          /**
           * The server host key algorithm.
           */
          key_algorithm?: string;
          /**
           * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
           */
          rsa_public_key?: {
            /**
             * Bit-length of modulus.
             */
            length?: string;
            /**
             * The RSA key's modulus (n) in big-endian encoding.
             */
            modulus?: string;
            /**
             * The RSA key's public exponent (e).
             */
            exponent?: string;
            [k: string]: unknown;
          };
          /**
           * The SHA2-256 digest calculated over the encoded key (algorithm + key data)
           */
          fingerprint_sha256?: string;
          ed25519_public_key?: {
            public_bytes?: string;
            [k: string]: unknown;
          };
          /**
           * OpenSSH certificate for host key, see https://cvsweb.openbsd.org/src/usr.bin/ssh/PROTOCOL.certkeys?rev=1.8
           */
          certkey_public_key?: {
            nonce?: string;
            /**
             * The hostnames for which this key is valid (empty string=any).
             */
            valid_principals?: string;
            reserved?: string;
            /**
             * The OpenSSH certificate signature generated using the signature_key.
             */
            signature?: {
              value?: string;
              signature_algorithm?: {
                /**
                 * An ssh public key algorithm identifier, named according to section 6 of https://www.ietf.org/rfc/rfc4251.txt; see https://www.iana.org/assignments/ssh-parameters/ssh-parameters.xhtml#ssh-parameters-19 for standard values.
                 */
                name?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Critical OpenSSL certificate options.
             */
            critical_options?: {
              /**
               * A list of any unrecognized critical options in the form "replaced_option_name: option_value", where replaced_option_name is the option name with any hyphens replaced by underscores.
               */
              unknown?: string;
              /**
               * True if and only if the force-command extension is present.
               */
              force_command?: boolean;
              /**
               * True if and only if the source-address extension is present.
               */
              source_address?: boolean;
              [k: string]: unknown;
            };
            validity?: {
              /**
               * The length of time, in seconds, that the certificate is valid.
               */
              length?: string;
              /**
               * Timestamp of when certificate expires. Timezone is UTC.
               */
              valid_before?: string;
              /**
               * Timestamp of when certificate is first valid. Timezone is UTC.
               */
              valid_after?: string;
              [k: string]: unknown;
            };
            /**
             * The CA key used to sign this certificate.
             */
            signature_key?: {
              /**
               * CA key algorithm.
               */
              key_algorithm?: string;
              /**
               * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
               */
              rsa_public_key?: {
                /**
                 * Bit-length of modulus.
                 */
                length?: string;
                /**
                 * The RSA key's modulus (n) in big-endian encoding.
                 */
                modulus?: string;
                /**
                 * The RSA key's public exponent (e).
                 */
                exponent?: string;
                [k: string]: unknown;
              };
              /**
               * SHA2-256 digest calculated over the CA key algorithm identifier + raw CA key data.
               */
              fingerprint_sha256?: string;
              ed25519_public_key?: {
                public_bytes?: string;
                [k: string]: unknown;
              };
              /**
               * The public portion of an ECDSA asymmetric key.
               */
              ecdsa_public_key?: {
                b?: string;
                curve?: string;
                gy?: string;
                n?: string;
                p?: string;
                length?: string;
                pub?: string;
                y?: string;
                x?: string;
                gx?: string;
                [k: string]: unknown;
              };
              /**
               * The public portion of a DSA asymmetric key.
               */
              dsa_public_key?: {
                q?: string;
                p?: string;
                y?: string;
                g?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Non-critical OpenSSH certificate extensions.
             */
            extensions?: {
              /**
               * True if and only if the permit-X11-forwarding extension is present.
               */
              permit_X11_forwarding?: boolean;
              /**
               * True if and only if the permit-port-forwarding extension is present.
               */
              permit_port_forwarding?: boolean;
              /**
               * A list of any unrecognized extensions in the form "replaced_extension_name: extension_value", where replaced_extension_name is the extension name with any hyphens replaced by underscores.
               */
              unknown?: string;
              /**
               * True if and only if the permit-pty extension is present.
               */
              permit_pty?: boolean;
              /**
               * True if and only if the permit-user-rc extension is present.
               */
              permit_user_rc?: boolean;
              /**
               * True if and only if the permit-agent-forwarding extension is present.
               */
              permit_agent_forwarding?: boolean;
              [k: string]: unknown;
            };
            key?: {
              key_algorithm?: string;
              algorithm?: string;
              /**
               * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
               */
              rsa_public_key?: {
                /**
                 * Bit-length of modulus.
                 */
                length?: string;
                /**
                 * The RSA key's modulus (n) in big-endian encoding.
                 */
                modulus?: string;
                /**
                 * The RSA key's public exponent (e).
                 */
                exponent?: string;
                [k: string]: unknown;
              };
              fingerprint_sha256?: string;
              raw?: string;
              ed25519_public_key?: {
                public_bytes?: string;
                [k: string]: unknown;
              };
              /**
               * The public portion of an ECDSA asymmetric key.
               */
              ecdsa_public_key?: {
                b?: string;
                curve?: string;
                gy?: string;
                n?: string;
                p?: string;
                length?: string;
                pub?: string;
                y?: string;
                x?: string;
                gx?: string;
                [k: string]: unknown;
              };
              /**
               * The public portion of a DSA asymmetric key.
               */
              dsa_public_key?: {
                q?: string;
                p?: string;
                y?: string;
                g?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Free-form text field set by the CA during issuance; used to identify the principal in log messages.
             */
            key_id?: string;
            /**
             * If present, a description of the error parsing the certificate.
             */
            parse_error?: string;
            /**
             * Certificate serial number (decimal encoded 64-bit integer).
             */
            serial?: string;
            [k: string]: unknown;
          };
          /**
           * The public portion of an ECDSA asymmetric key.
           */
          ecdsa_public_key?: {
            b?: string;
            curve?: string;
            gy?: string;
            n?: string;
            p?: string;
            length?: string;
            pub?: string;
            y?: string;
            x?: string;
            gx?: string;
            [k: string]: unknown;
          };
          /**
           * The public portion of a DSA asymmetric key.
           */
          dsa_public_key?: {
            q?: string;
            p?: string;
            y?: string;
            g?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * The server endpoint ID.
         */
        banner?: {
          comment?: string;
          raw?: string;
          version?: string;
          software?: string;
          [k: string]: unknown;
        };
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p27017?: {
    mongodb?: {
      banner?: {
        /**
         * Result of issuing the isMaster command see https://docs.mongodb.com/manual/reference/command/isMaster
         */
        is_master?: {
          /**
           * Indicates whether the server is running in read-only mode.
           */
          read_only?: boolean;
          /**
           * The earliest version of the wire protocol that this server can use.
           */
          min_wire_version?: string;
          /**
           * The latest version of the wire protocol that this server can use.
           */
          max_wire_version?: string;
          /**
           * The time in minutes that a session remains active after its most recent use
           */
          logical_session_timeout_minutes?: string;
          /**
           * Indicates if this node is writable.
           */
          is_master?: boolean;
          /**
           * The maximum number of writes in a single write batch.
           */
          max_write_batch_size?: string;
          /**
           * The maximum size (in bytes) of a BSON wire protocol message.
           */
          max_message_size_bytes?: string;
          /**
           * The maximum size (in bytes) of a BSON object.
           */
          max_bson_object_size?: string;
          [k: string]: unknown;
        };
        /**
         * If true, MongoDB was detected on this machine.
         */
        supported?: boolean;
        /**
         * Result of issuing the buildInfo command see https://docs.mongodb.com/manual/reference/command/buildInfo
         */
        build_info?: {
          /**
           * DEPRECATED.
           */
          max_wire_version?: string;
          /**
           * Version of mongodb server
           */
          version?: string;
          /**
           * Git Version of mongodb server
           */
          git_version?: string;
          /**
           * Various debugging information about the build environment.
           */
          build_environment?: {
            /**
             * The buildEnvironment.linkflags field.
             */
            link_flags?: string;
            /**
             * The buildEnvironment.ccflags field.
             */
            cc_flags?: string;
            /**
             * The buildEnvironment.distmod field.
             */
            dist_mod?: string;
            /**
             * The buildEnvironment.cc field.
             */
            cc?: string;
            /**
             * The buildEnvironment.cxxflags field.
             */
            cxx_flags?: string;
            /**
             * The buildEnvironment.cxx field.
             */
            cxx?: string;
            /**
             * The buildEnvironment.distarch field.
             */
            dist_arch?: string;
            /**
             * The buildEnvironment.target_arch field.
             */
            target_arch?: string;
            /**
             * The buildEnvironment.target_os field.
             */
            target_os?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  autonomous_system?: {
    /**
     * The friendly name of the autonomous system.
     */
    name?: string;
    /**
     * DEPRECATED.
     */
    rir?: string;
    /**
     * The autonomous system's CIDR.
     */
    routed_prefix?: string;
    /**
     * The autonomous system's two-letter ISO 3166-1 alpha-2 country code (US, CN, GB, RU, ...).
     */
    country_code?: string;
    /**
     * The name of the organization managning the autonomous system.
     */
    organization?: string;
    /**
     * The ASNs of the autonomous systems between a fixed starting point and the host.
     */
    path?: string;
    /**
     * The ASN (autonomous system number) of the host's autonomous system.
     */
    asn?: string;
    /**
     * Brief description of the autonomous system.
     */
    description?: string;
    [k: string]: unknown;
  };
  p8883?: {
    mqtt?: {
      banner?: {
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          /**
           * The server's TLS certificate.
           */
          certificate?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          chain?: {
            fingerprints?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's SubjectPublicKeyInfo, as a hexadecimal string.
               */
              spki_subject?: string;
              /**
               * The SHA1 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha1?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, as a hexadecimal string.
               */
              tbs?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, *with any CT extensions omitted*, as a hexadecimal string.
               */
              tbs_noct?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha256?: string;
              /**
               * The MD5 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              md5?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * If true, MQTT was detected on this machine.
         */
        supported?: boolean;
        /**
         * Raw CONNACK response packet
         */
        raw_conn_ack?: string;
        connack?: {
          /**
           * Raw connect status value
           */
          raw?: string;
          /**
           * Connection status
           */
          connect_return?: string;
          [k: string]: unknown;
        };
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p5903?: {
    vnc?: {
      banner?: {
        /**
         * If server terminates handshake, the reason offered (if any)
         */
        connection_fail_reason?: string;
        screen?: {
          framebuffer_width?: string;
          server_pixel_format?: {
            /**
             * If false, color maps are used
             */
            true_color_flag?: string;
            /**
             * Max value of red pixel
             */
            red_max?: string;
            /**
             * Max value of blue pixel
             */
            blue_max?: string;
            /**
             * how many bits to right shift a pixel datum to get red bits in lsb
             */
            blue_shift?: string;
            padding_byte_3?: string;
            padding_byte_2?: string;
            padding_byte_1?: string;
            /**
             * how many bits to right shift a pixel datum to get red bits in lsb
             */
            red_shift?: string;
            /**
             * Color depth
             */
            depth?: string;
            /**
             * How many bits in a single full pixel datum. Valid values are: 8, 16, 32
             */
            bits_per_pixel?: string;
            /**
             * If pixel RGB data are in big-endian
             */
            big_endian_flag?: string;
            /**
             * how many bits to right shift a pixel datum to get red bits in lsb
             */
            green_shift?: string;
            /**
             * Max value of green pixel
             */
            green_max?: string;
            [k: string]: unknown;
          };
          /**
           * Server advertised desktop name length
           */
          desktop_name_len?: string;
          framebuffer_height?: string;
          [k: string]: unknown;
        };
        /**
         * If true, VNC was detected on this machine.
         */
        supported?: boolean;
        pixel_encoding?: {
          /**
           * server-preferred pixel encoding
           */
          name?: string;
          /**
           * binary value of server-preferred pixel encoding
           */
          value?: string;
          [k: string]: unknown;
        };
        framebuffer_grab_stats?: {
          /**
           * Number of pixel bytes received
           */
          bytes_received?: string;
          /**
           * True if a framebuffer grab was saved
           */
          framebuffer_saved?: boolean;
          /**
           * Full frames received.  Currently capped at 1
           */
          full_frames_received?: string;
          /**
           * Number of rects sent to re-assemble for one full frame
           */
          rects_received?: string;
          [k: string]: unknown;
        };
        security_types?: {
          /**
           * server-specified security option
           */
          name?: string;
          /**
           * binary value of server-specified security option
           */
          value?: string;
          [k: string]: unknown;
        };
        server_protocol_version?: {
          /**
           * Full VNC Protocol Version String
           */
          version_string?: string;
          /**
           * Version minor
           */
          version_minor?: string;
          /**
           * Version major
           */
          version_major?: string;
          [k: string]: unknown;
        };
        /**
         * Desktop name provided by the server, capped at 255 bytes
         */
        desktop_name?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p5902?: {
    vnc?: {
      banner?: {
        /**
         * If server terminates handshake, the reason offered (if any)
         */
        connection_fail_reason?: string;
        screen?: {
          framebuffer_width?: string;
          server_pixel_format?: {
            /**
             * If false, color maps are used
             */
            true_color_flag?: string;
            /**
             * Max value of red pixel
             */
            red_max?: string;
            /**
             * Max value of blue pixel
             */
            blue_max?: string;
            /**
             * how many bits to right shift a pixel datum to get red bits in lsb
             */
            blue_shift?: string;
            padding_byte_3?: string;
            padding_byte_2?: string;
            padding_byte_1?: string;
            /**
             * how many bits to right shift a pixel datum to get red bits in lsb
             */
            red_shift?: string;
            /**
             * Color depth
             */
            depth?: string;
            /**
             * How many bits in a single full pixel datum. Valid values are: 8, 16, 32
             */
            bits_per_pixel?: string;
            /**
             * If pixel RGB data are in big-endian
             */
            big_endian_flag?: string;
            /**
             * how many bits to right shift a pixel datum to get red bits in lsb
             */
            green_shift?: string;
            /**
             * Max value of green pixel
             */
            green_max?: string;
            [k: string]: unknown;
          };
          /**
           * Server advertised desktop name length
           */
          desktop_name_len?: string;
          framebuffer_height?: string;
          [k: string]: unknown;
        };
        /**
         * If true, VNC was detected on this machine.
         */
        supported?: boolean;
        pixel_encoding?: {
          /**
           * server-preferred pixel encoding
           */
          name?: string;
          /**
           * binary value of server-preferred pixel encoding
           */
          value?: string;
          [k: string]: unknown;
        };
        framebuffer_grab_stats?: {
          /**
           * Number of pixel bytes received
           */
          bytes_received?: string;
          /**
           * True if a framebuffer grab was saved
           */
          framebuffer_saved?: boolean;
          /**
           * Full frames received.  Currently capped at 1
           */
          full_frames_received?: string;
          /**
           * Number of rects sent to re-assemble for one full frame
           */
          rects_received?: string;
          [k: string]: unknown;
        };
        security_types?: {
          /**
           * server-specified security option
           */
          name?: string;
          /**
           * binary value of server-specified security option
           */
          value?: string;
          [k: string]: unknown;
        };
        server_protocol_version?: {
          /**
           * Full VNC Protocol Version String
           */
          version_string?: string;
          /**
           * Version minor
           */
          version_minor?: string;
          /**
           * Version major
           */
          version_major?: string;
          [k: string]: unknown;
        };
        /**
         * Desktop name provided by the server, capped at 255 bytes
         */
        desktop_name?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p5901?: {
    vnc?: {
      banner?: {
        /**
         * If server terminates handshake, the reason offered (if any)
         */
        connection_fail_reason?: string;
        screen?: {
          framebuffer_width?: string;
          server_pixel_format?: {
            /**
             * If false, color maps are used
             */
            true_color_flag?: string;
            /**
             * Max value of red pixel
             */
            red_max?: string;
            /**
             * Max value of blue pixel
             */
            blue_max?: string;
            /**
             * how many bits to right shift a pixel datum to get red bits in lsb
             */
            blue_shift?: string;
            padding_byte_3?: string;
            padding_byte_2?: string;
            padding_byte_1?: string;
            /**
             * how many bits to right shift a pixel datum to get red bits in lsb
             */
            red_shift?: string;
            /**
             * Color depth
             */
            depth?: string;
            /**
             * How many bits in a single full pixel datum. Valid values are: 8, 16, 32
             */
            bits_per_pixel?: string;
            /**
             * If pixel RGB data are in big-endian
             */
            big_endian_flag?: string;
            /**
             * how many bits to right shift a pixel datum to get red bits in lsb
             */
            green_shift?: string;
            /**
             * Max value of green pixel
             */
            green_max?: string;
            [k: string]: unknown;
          };
          /**
           * Server advertised desktop name length
           */
          desktop_name_len?: string;
          framebuffer_height?: string;
          [k: string]: unknown;
        };
        /**
         * If true, VNC was detected on this machine.
         */
        supported?: boolean;
        pixel_encoding?: {
          /**
           * server-preferred pixel encoding
           */
          name?: string;
          /**
           * binary value of server-preferred pixel encoding
           */
          value?: string;
          [k: string]: unknown;
        };
        framebuffer_grab_stats?: {
          /**
           * Number of pixel bytes received
           */
          bytes_received?: string;
          /**
           * True if a framebuffer grab was saved
           */
          framebuffer_saved?: boolean;
          /**
           * Full frames received.  Currently capped at 1
           */
          full_frames_received?: string;
          /**
           * Number of rects sent to re-assemble for one full frame
           */
          rects_received?: string;
          [k: string]: unknown;
        };
        security_types?: {
          /**
           * server-specified security option
           */
          name?: string;
          /**
           * binary value of server-specified security option
           */
          value?: string;
          [k: string]: unknown;
        };
        server_protocol_version?: {
          /**
           * Full VNC Protocol Version String
           */
          version_string?: string;
          /**
           * Version minor
           */
          version_minor?: string;
          /**
           * Version major
           */
          version_major?: string;
          [k: string]: unknown;
        };
        /**
         * Desktop name provided by the server, capped at 255 bytes
         */
        desktop_name?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p5900?: {
    vnc?: {
      banner?: {
        /**
         * If server terminates handshake, the reason offered (if any)
         */
        connection_fail_reason?: string;
        screen?: {
          framebuffer_width?: string;
          server_pixel_format?: {
            /**
             * If false, color maps are used
             */
            true_color_flag?: string;
            /**
             * Max value of red pixel
             */
            red_max?: string;
            /**
             * Max value of blue pixel
             */
            blue_max?: string;
            /**
             * how many bits to right shift a pixel datum to get red bits in lsb
             */
            blue_shift?: string;
            padding_byte_3?: string;
            padding_byte_2?: string;
            padding_byte_1?: string;
            /**
             * how many bits to right shift a pixel datum to get red bits in lsb
             */
            red_shift?: string;
            /**
             * Color depth
             */
            depth?: string;
            /**
             * How many bits in a single full pixel datum. Valid values are: 8, 16, 32
             */
            bits_per_pixel?: string;
            /**
             * If pixel RGB data are in big-endian
             */
            big_endian_flag?: string;
            /**
             * how many bits to right shift a pixel datum to get red bits in lsb
             */
            green_shift?: string;
            /**
             * Max value of green pixel
             */
            green_max?: string;
            [k: string]: unknown;
          };
          /**
           * Server advertised desktop name length
           */
          desktop_name_len?: string;
          framebuffer_height?: string;
          [k: string]: unknown;
        };
        /**
         * If true, VNC was detected on this machine.
         */
        supported?: boolean;
        pixel_encoding?: {
          /**
           * server-preferred pixel encoding
           */
          name?: string;
          /**
           * binary value of server-preferred pixel encoding
           */
          value?: string;
          [k: string]: unknown;
        };
        framebuffer_grab_stats?: {
          /**
           * Number of pixel bytes received
           */
          bytes_received?: string;
          /**
           * True if a framebuffer grab was saved
           */
          framebuffer_saved?: boolean;
          /**
           * Full frames received.  Currently capped at 1
           */
          full_frames_received?: string;
          /**
           * Number of rects sent to re-assemble for one full frame
           */
          rects_received?: string;
          [k: string]: unknown;
        };
        security_types?: {
          /**
           * server-specified security option
           */
          name?: string;
          /**
           * binary value of server-specified security option
           */
          value?: string;
          [k: string]: unknown;
        };
        server_protocol_version?: {
          /**
           * Full VNC Protocol Version String
           */
          version_string?: string;
          /**
           * Version minor
           */
          version_minor?: string;
          /**
           * Version major
           */
          version_major?: string;
          [k: string]: unknown;
        };
        /**
         * Desktop name provided by the server, capped at 255 bytes
         */
        desktop_name?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p1521?: {
    oracle?: {
      /**
       * The log of the Oracle / TDS handshake process.
       */
      banner?: {
        /**
         * The TLS handshake with the server (if applicable).
         */
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          /**
           * The server's TLS certificate.
           */
          certificate?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * Additional certificates provided by the server.
           */
          chain?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * The data from the Refuse packet returned by the server; it is empty if the server does not return a Refuse packet.
         */
        refuse_error_raw?: string;
        /**
         * The protocol version number from the Accept packet.
         */
        accept_version?: string;
        /**
         * The parsed connect descriptor returned by the server in the redirect packet, if one is sent. Otherwise, omitted. The parsed descriptor is a list of objects with key and value, where the keys strings like 'DESCRIPTION.CONNECT_DATA.SERVICE_NAME'.
         */
        redirect_target?: {
          /**
           * The descriptor value.
           */
          value?: string;
          /**
           * The dot-separated path to the descriptor
           */
          key?: string;
          [k: string]: unknown;
        };
        /**
         * The 'SysReason' returned by the server in the RefusePacket, as an 8-bit unsigned hex string. Omitted if the server did not send a Refuse packet.
         */
        refuse_reason_sys?: string;
        /**
         * The parsed DESCRIPTION.VSNNUM field from the RefuseError descriptor returned by the server in the Refuse packet, in dotted-decimal format.
         */
        refuse_version?: string;
        /**
         * If true, Oracle was detected on this machine.
         */
        supported?: boolean;
        /**
         * A map from the native Service Negotation service names to the ReleaseVersion (in dotted-decimal format) in that service packet.
         */
        nsn_service_versions?: {
          DataIntegrity?: string;
          Encryption?: string;
          Authentication?: string;
          Supervisor?: string;
          [k: string]: unknown;
        };
        /**
         * Set of flags that the server returns in the Accept packet.
         */
        global_service_options?: {
          HEADER_CHECKSUM?: boolean;
          HALF_DUPLEX?: boolean;
          UNKNOWN_0001?: boolean;
          PACKET_CHECKSUM?: boolean;
          CAN_SEND_ATTENTION?: boolean;
          FULL_DUPLEX?: boolean;
          ATTENTION_PROCESSING?: boolean;
          UNKNOWN_0040?: boolean;
          UNKNOWN_0100?: boolean;
          UNKNOWN_0080?: boolean;
          UNKNOWN_0020?: boolean;
          BROKEN_CONNECT_NOTIFY?: boolean;
          CAN_RECEIVE_ATTENTION?: boolean;
          DIRECT_IO?: boolean;
          [k: string]: unknown;
        };
        /**
         * True if the server sent a Resend packet request in response to the client's first Connect packet.
         */
        did_resend?: boolean;
        /**
         * The parsed descriptor returned by the server in the Refuse packet; it is empty if the server does not return a Refuse packet. The keys are strings like 'DESCRIPTION.ERROR_STACK.ERROR.CODE'.
         */
        refuse_error?: {
          /**
           * The descriptor value.
           */
          value?: string;
          /**
           * The dot-separated path to the descriptor
           */
          key?: string;
          [k: string]: unknown;
        };
        /**
         * The 'AppReason' returned by the server in the RefusePacket, as an 8-bit unsigned hex string. Omitted if the server did not send a Refuse packet.
         */
        refuse_reason_app?: string;
        /**
         * The connect descriptor returned by the server in the Redirect packet, if one is sent. Otherwise, omitted.
         */
        redirect_target_raw?: string;
        /**
         * The ReleaseVersion string (in dotted-decimal format) in the root of the Native Service Negotiation packet.
         */
        nsn_version?: string;
        /**
         * The first set of ConnectFlags returned in the Accept packet.
         */
        connect_flags0?: {
          INTERCHANGE_INVOLVED?: boolean;
          SERVICES_WANTED?: boolean;
          SERVICES_ENABLED?: boolean;
          SERVICES_LINKED_IN?: boolean;
          SERVICES_REQUIRED?: boolean;
          UNKNOWN_40?: boolean;
          UNKNOWN_20?: boolean;
          UNKNOWN_80?: boolean;
          [k: string]: unknown;
        };
        /**
         * The second set of ConnectFlags returned in the Accept packet.
         */
        connect_flags1?: {
          INTERCHANGE_INVOLVED?: boolean;
          SERVICES_WANTED?: boolean;
          SERVICES_ENABLED?: boolean;
          SERVICES_LINKED_IN?: boolean;
          SERVICES_REQUIRED?: boolean;
          UNKNOWN_40?: boolean;
          UNKNOWN_20?: boolean;
          UNKNOWN_80?: boolean;
          [k: string]: unknown;
        };
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p3389?: {
    rdp?: {
      banner?: {
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          /**
           * The server's TLS certificate.
           */
          certificate?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          chain?: {
            fingerprints?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's SubjectPublicKeyInfo, as a hexadecimal string.
               */
              spki_subject?: string;
              /**
               * The SHA1 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha1?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, as a hexadecimal string.
               */
              tbs?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, *with any CT extensions omitted*, as a hexadecimal string.
               */
              tbs_noct?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha256?: string;
              /**
               * The MD5 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              md5?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        selected_security_protocol?: {
          tls?: boolean;
          /**
           * Set for both error and success. 0 = PROTOCOL_RDP.
           */
          raw_value?: string;
          rdstls?: boolean;
          standard_rdp?: boolean;
          error_hybrid_required?: boolean;
          credssp_early_auth?: boolean;
          error_bad_flags?: boolean;
          error_ssl_forbidden?: boolean;
          error_ssl_cert_missing?: boolean;
          credssp?: boolean;
          error_ssl_user_auth_required?: boolean;
          error?: boolean;
          error_ssl_required?: boolean;
          error_unknown?: boolean;
          [k: string]: unknown;
        };
        connect_response?: {
          connect_id?: string;
          domain_parameters?: {
            max_mcspdu_size?: string;
            max_user_id_channels?: string;
            min_octets_per_second?: string;
            domain_protocol_ver?: string;
            tcs_per_mcs?: string;
            max_token_ids?: string;
            max_provider_height?: string;
            max_channel_ids?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * If true, RDP was detected on this machine.
         */
        supported?: boolean;
        version?: {
          raw_value?: string;
          major?: string;
          minor?: string;
          [k: string]: unknown;
        };
        protocol_supported_flags?: {
          dynvc_graphics_pipeline?: boolean;
          neg_resp_reserved?: boolean;
          redirected_auth_mode?: boolean;
          restricted_admin_mode?: boolean;
          extended_client_data_supported?: boolean;
          [k: string]: unknown;
        };
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p623?: {
    ipmi?: {
      /**
       * The IPMI scan response. All section numbers refer to https://www.intel.com/content/dam/www/public/us/en/documents/product-briefs/ipmi-second-gen-interface-spec-v2-rev1-1.pdf.
       */
      banner?: {
        /**
         * The RMCP header of the response, (section 13.1.3)
         */
        rmcp_header?: {
          /**
           * The version. This scanner supports version 6.
           */
          version?: string;
          /**
           * Reserved for future use. 0 for version 6.
           */
          reserved?: string;
          /**
           * The class of the message
           */
          message_class?: {
            /**
             * True if the message is an acknowledgment to a previous message, omitted otherwise
             */
            is_ack?: boolean;
            /**
             * The raw message class byte.
             */
            raw?: string;
            /**
             * Reserved. Omitted if 0.
             */
            reserved?: string;
            /**
             * Just the class part of the byte (lower 5 bits of raw)
             */
            class?: string;
            /**
             * The human-readable name of the message class
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * Sequence number of this packet in the session.
           */
          sequence_number?: string;
          [k: string]: unknown;
        };
        /**
         * If true, IPMI was detected on this machine.
         */
        supported?: boolean;
        /**
         * The Get Channel Authentication Capabilities response (section 22.13)
         */
        capabilities?: {
          /**
           * The status code of the response
           */
          completion_code?: {
            /**
             * The raw completion code
             */
            raw?: string;
            /**
             * The human-readable name of the code
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * The auth types supported by the server
           */
          supported_auth_types?: {
            /**
             * True if the OEM Proprietary AuthType is supported. Omitted otherwise.
             */
            oem_proprietary?: boolean;
            /**
             * True if the None AuthType is supported. Omitted otherwise.
             */
            none?: boolean;
            /**
             * True if the Extended authentication is supported. Omitted otherwise.
             */
            extended?: boolean;
            /**
             * The reserved bits. Omitted if zero.
             */
            reserved?: string;
            /**
             * The raw byte, with the bit mask etc
             */
            raw?: string;
            /**
             * True if the MD2 AuthType is supported. Omitted otherwise.
             */
            md2?: boolean;
            /**
             * True if the Password AuthType is supported. Omitted otherwise.
             */
            password?: boolean;
            /**
             * True if the MD5 AuthType is supported. Omitted otherwise.
             */
            md5?: boolean;
            [k: string]: unknown;
          };
          /**
           * The OEM-specific data
           */
          oem_data?: string;
          /**
           * The response channel number
           */
          channel_number?: string;
          /**
           * The 3-byte OEM identifier
           */
          oem_id?: string;
          /**
           * Extended auth capabilities (if present)
           */
          extended_capabilities?: {
            /**
             * True if IPMI v1.5 is supported
             */
            supports_ipmi_v1_5?: boolean;
            /**
             * Reserved. Omitted if 0.
             */
            reserved?: string;
            /**
             * True if IPMI v2.0 is supported
             */
            supports_ipmi_v2_0?: boolean;
            [k: string]: unknown;
          };
          /**
           * The authentication status
           */
          auth_status?: {
            /**
             * If true, the server allows anonymous login. Otherwise omitted.
             */
            anonymous_login_enabled?: boolean;
            /**
             * If true, the server has anonymous users. Otherwise omitted.
             */
            has_anonymous_users?: boolean;
            /**
             * If true, each message must be authenticated. Otherwise omitted.
             */
            auth_each_message?: boolean;
            /**
             * Reserved. Omitted if zero.
             */
            reserved?: string;
            /**
             * The KG field. true if present, otherwise omitted.
             */
            two_key_login_required?: boolean;
            /**
             * If true, user authentication is disabled. Otherwise omitted.
             */
            user_auth_disabled?: boolean;
            /**
             * If true, the server supports named users. Otherwise omitted.
             */
            has_named_users?: boolean;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * The raw data returned by the server
         */
        raw?: string;
        /**
         * The IPMI sesssion header of the response
         */
        ipmi_header?: {
          /**
           * The authentication type for this request (see section 13.6)
           */
          auth_type?: {
            /**
             * The raw value of the auth_type
             */
            raw?: string;
            /**
             * Reserved. Omitted if zero.
             */
            reserved?: string;
            /**
             * The human-readable name of the auth type.
             */
            name?: string;
            /**
             * Just the auth type (reserved bits omitted)
             */
            type?: string;
            [k: string]: unknown;
          };
          /**
           * The expected length of the IPMI payload. Omitted if zero.
           */
          length?: string;
          /**
           * The ID of this session; omitted if zero.
           */
          session_id?: string;
          /**
           * The session sequence number of this packet in the session
           */
          sequence_number?: string;
          /**
           * The 16-byte authentication code; not present if auth_type is None
           */
          auth_code?: string;
          [k: string]: unknown;
        };
        /**
         * The IPMI command payload
         */
        ipmi_payload?: {
          /**
           * The NetFn and LUN
           */
          net_fn?: {
            /**
             * The raw value of the (NetFn << 2) | LUN
             */
            raw?: string;
            /**
             * The parsed NetFn value (the upper 6 bits of raw)
             */
            net_fn?: {
              /**
               * True if the least-significant bit is one, omitted otherwise.
               */
              is_response?: boolean;
              /**
               * True if the least-significant bit is zero, omitted otherwise.
               */
              is_request?: boolean;
              /**
               * The human-readable name of the NetFn
               */
              name?: string;
              /**
               * The normalized value of the NetFn (i.e. raw & 0xfe, so it is always even)
               */
              value?: string;
              /**
               * The raw value of the NetFn (6 bits, least significant indicates request/response)
               */
              raw?: string;
              [k: string]: unknown;
            };
            /**
             * The parsed LUN (logical unit number -- the lower 2 bits of raw)
             */
            lun?: {
              /**
               * The value of the LUN (3 bits)
               */
              raw?: string;
              /**
               * The human-readable name of the LUN
               */
              name?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is set to true if the values of chk1 / chk2 do not match the command data; otherwise it is omitted.
           */
          checksum_error?: boolean;
          /**
           * The parsed IPMI command number
           */
          cmd?: {
            /**
             * The raw value of the cmd value
             */
            raw?: string;
            /**
             * The human-readable name of the cmd + NetFn
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * The chk1 field (chk1 = -((RsAddr + NetFn) & 0xff)
           */
          chk1?: string;
          /**
           * The chk2 field (chk2 = -((rq_addr + rq_seq + cmd + data[:]) & 0xff)
           */
          chk2?: string;
          /**
           * The request sequence number.
           */
          rq_seq?: string;
          /**
           * The response address
           */
          rs_addr?: {
            /**
             * The raw address byte (including the slave/software_id bit)
             */
            raw?: string;
            /**
             * Indicates that the address refers to a software identifier. Set to true if the least significant bit of raw is one, otherwise absent.
             */
            software_id?: boolean;
            /**
             * Indicates that the address refers to a slave device. Set to true if the least significant bit of raw is zero, otherwise absent.
             */
            slave?: boolean;
            /**
             * The address, with the slave/software_id bit removed.
             */
            address?: string;
            [k: string]: unknown;
          };
          /**
           * The request address
           */
          rq_addr?: {
            /**
             * The raw address byte (including the slave/software_id bit)
             */
            raw?: string;
            /**
             * Indicates that the address refers to a software identifier. Set to true if the least significant bit of raw is one, otherwise absent.
             */
            software_id?: boolean;
            /**
             * Indicates that the address refers to a slave device. Set to true if the least significant bit of raw is zero, otherwise absent.
             */
            slave?: boolean;
            /**
             * The address, with the slave/software_id bit removed.
             */
            address?: string;
            [k: string]: unknown;
          };
          /**
           * The raw data. On success, this should be the value of the GetAuthenticationCapabilities resopnse.
           */
          data?: string;
          [k: string]: unknown;
        };
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p16993?: {
    https?: {
      get?: {
        /**
         * The HTTP body, truncated according to configured MaxSize (default 256kb).
         */
        body?: string;
        /**
         * HTTP response headers. Names are normalized by converting them to lowercase and replacing hyphens with underscores. When a header is returned multiple times, only the first is included. Values are truncated to 256 bytes.
         */
        headers?: {
          /**
           * The value of the content_length header.
           */
          content_length?: string;
          /**
           * The value of the x-ua-compatible header.
           */
          x_ua_compatible?: string;
          /**
           * The value of the via header.
           */
          via?: string;
          /**
           * The value of the pragma header.
           */
          pragma?: string;
          /**
           * The value of the set_cookie header.
           */
          set_cookie?: string;
          /**
           * The value of the x-powered-by header.
           */
          x_powered_by?: string;
          /**
           * The value of the vary header.
           */
          vary?: string;
          /**
           * The value of the retry_after header.
           */
          retry_after?: string;
          /**
           * The value of the www-authenticate header.
           */
          www_authenticate?: string;
          /**
           * The value of the warning header.
           */
          warning?: string;
          /**
           * The value of the content_language header.
           */
          content_language?: string;
          /**
           * The value of the content_location header.
           */
          content_location?: string;
          /**
           * The value of the p3p header.
           */
          p3p?: string;
          /**
           * The value of the server header.
           */
          server?: string;
          /**
           * The value of the proxy-authenticate header.
           */
          proxy_authenticate?: string;
          /**
           * The value of the proxy-agent header.
           */
          proxy_agent?: string;
          /**
           * The value of the upgrade header.
           */
          upgrade?: string;
          /**
           * Other headers are included as a list of key, value pairs.
           */
          unknown?: {
            value?: string;
            key?: string;
            [k: string]: unknown;
          };
          /**
           * The value of the x-content-type-options header.
           */
          x_content_type_options?: string;
          /**
           * The value of the x-content-security-policy header.
           */
          x_content_security_policy?: string;
          /**
           * The value of the etag header.
           */
          etag?: string;
          /**
           * The value of the content_range header.
           */
          content_range?: string;
          /**
           * The value of the content_encoding header.
           */
          content_encoding?: string;
          /**
           * The value of the access-control-allow-origin header.
           */
          access_control_allow_origin?: string;
          /**
           * The value of the content_md5 header.
           */
          content_md5?: string;
          /**
           * The value of the content_disposition header.
           */
          content_disposition?: string;
          /**
           * The value of the cache_control header.
           */
          cache_control?: string;
          /**
           * The value of the location header.
           */
          location?: string;
          /**
           * The value of the status header.
           */
          status?: string;
          /**
           * The value of the strict-transport-security header.
           */
          strict_transport_security?: string;
          /**
           * The value of the expires header.
           */
          expires?: string;
          /**
           * The value of the accept-patch header.
           */
          accept_patch?: string;
          /**
           * The value of the last_modified header.
           */
          last_modified?: string;
          /**
           * The value of the link header.
           */
          link?: string;
          /**
           * The value of the content_type header.
           */
          content_type?: string;
          /**
           * The value of the date header.
           */
          date?: string;
          /**
           * The value of the x-frame-options header.
           */
          x_frame_options?: string;
          /**
           * The value of the x-webkit-csp header.
           */
          x_webkit_csp?: string;
          /**
           * The value of the x-real-ip header.
           */
          x_real_ip?: string;
          /**
           * The value of the alternate_protocol header.
           */
          alternate_protocol?: string;
          /**
           * The value of the accept-ranges header.
           */
          accept_ranges?: string;
          /**
           * The value of the age header.
           */
          age?: string;
          /**
           * The value of the x-xss-protection header.
           */
          x_xss_protection?: string;
          /**
           * The value of the x-forwarded-for header.
           */
          x_forwarded_for?: string;
          /**
           * The value of the refresh header.
           */
          refresh?: string;
          /**
           * The value of the public-key-pins header.
           */
          public_key_pins?: string;
          /**
           * The value of the connection header.
           */
          connection?: string;
          /**
           * The value of the x-content-duration header.
           */
          x_content_duration?: string;
          /**
           * The value of the alt-svc header.
           */
          alt_svc?: string;
          /**
           * The value of the allow header.
           */
          allow?: string;
          /**
           * The value of the referer header.
           */
          referer?: string;
          /**
           * The value of the content-security-policy header.
           */
          content_security_policy?: string;
          /**
           * The value of the transfer_encoding header.
           */
          transfer_encoding?: string;
          /**
           * The value of the trailer header.
           */
          trailer?: string;
          [k: string]: unknown;
        };
        /**
         * The HTTP status code (e.g. 200, 404, 503).
         */
        status_code?: string;
        /**
         * The contents of the first TITLE tag in the body (stripped of any surrounding whitespace and truncated to 1024 characters).
         */
        title?: string;
        /**
         * The full status line returned by the server (e.g. "200 OK" or "401 UNAUTHORIZED")
         */
        status_line?: string;
        /**
         * The SHA2-256 digest of the body. NOTE: This digest is calculated using the same data returned in the body field, so if that was truncated, this will be calculated over the truncated body, rather than full data stored on the server.
         */
        body_sha256?: string;
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p53?: {
    dns?: {
      lookup?: {
        errors?: boolean;
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        support?: boolean;
        open_resolver?: boolean;
        answers?: {
          type?: string;
          name?: string;
          response?: string;
          [k: string]: unknown;
        };
        resolves_correctly?: boolean;
        additionals?: {
          type?: string;
          name?: string;
          response?: string;
          [k: string]: unknown;
        };
        questions?: {
          type?: string;
          name?: string;
          [k: string]: unknown;
        };
        authorities?: {
          type?: string;
          name?: string;
          response?: string;
          [k: string]: unknown;
        };
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  location?: {
    /**
     * The state or province name of the detected location.
     */
    province?: string;
    /**
     * The English name of the detected city.
     */
    city?: string;
    /**
     * The English name of the detected country.
     */
    country?: string;
    /**
     * The estimated longitude of the detected location.
     */
    longitude?: number;
    /**
     * The English name of the registered country.
     */
    registered_country?: string;
    /**
     * The registered country's two-letter ISO 3166-1 alpha-2 country code (US, CN, GB, RU, ...).
     */
    registered_country_code?: string;
    /**
     * The postal code (if applicable) of the detected location.
     */
    postal_code?: string;
    /**
     * The detected two-letter ISO 3166-1 alpha-2 country code (US, CN, GB, RU, ...).
     */
    country_code?: string;
    /**
     * The estimated latitude of the detected location.
     */
    latitude?: number;
    /**
     * The IANA time zone database name of the detected location.
     */
    timezone?: string;
    /**
     * The English name of the detected continent (North America, Europe, Asia, South America, Africa, Oceania, Antarctica)
     */
    continent?: string;
    [k: string]: unknown;
  };
  ip?: string;
  p110?: {
    pop3?: {
      starttls?: {
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          /**
           * The server's TLS certificate.
           */
          certificate?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * Additional certificates provided by the server.
           */
          chain?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        /**
         * The response to the starttls command.
         */
        starttls?: string;
        /**
         * The IMAP/POP3 command sent by the server immediately upon connection.
         */
        banner?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p5672?: {
    amqp?: {
      banner?: {
        /**
         * If true, AMQP was detected on this machine.
         */
        supported?: boolean;
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          /**
           * The server's TLS certificate.
           */
          certificate?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          chain?: {
            fingerprints?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's SubjectPublicKeyInfo, as a hexadecimal string.
               */
              spki_subject?: string;
              /**
               * The SHA1 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha1?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, as a hexadecimal string.
               */
              tbs?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, *with any CT extensions omitted*, as a hexadecimal string.
               */
              tbs_noct?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha256?: string;
              /**
               * The MD5 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              md5?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        protocol_id?: {
          /**
           * Protocol ID
           */
          id?: string;
          /**
           * Decoded protocol ID
           */
          name?: string;
          [k: string]: unknown;
        };
        version?: {
          /**
           * version major
           */
          major?: string;
          /**
           * version minor
           */
          minor?: string;
          /**
           * version revision
           */
          revision?: string;
          [k: string]: unknown;
        };
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p6443?: {
    kubernetes?: {
      banner?: {
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          certificate?: {
            fingerprints?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's SubjectPublicKeyInfo, as a hexadecimal string.
               */
              spki_subject?: string;
              /**
               * The SHA1 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha1?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, as a hexadecimal string.
               */
              tbs?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, *with any CT extensions omitted*, as a hexadecimal string.
               */
              tbs_noct?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha256?: string;
              /**
               * The MD5 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              md5?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          chain?: {
            fingerprints?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's SubjectPublicKeyInfo, as a hexadecimal string.
               */
              spki_subject?: string;
              /**
               * The SHA1 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha1?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, as a hexadecimal string.
               */
              tbs?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, *with any CT extensions omitted*, as a hexadecimal string.
               */
              tbs_noct?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha256?: string;
              /**
               * The MD5 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              md5?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        roles?: {
          roles?: {
            /**
             * individual rules set for a specific role
             */
            rules?: {
              /**
               * Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule. VerbAll represents all kinds
               */
              verbs?: string;
              /**
               * APIGroups is the name of the APIGroup that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed
               */
              api_groups?: string;
              /**
               * Resources is a list of resources this rule applies to. ResourceAll represents all resources
               */
              resources?: string;
              [k: string]: unknown;
            };
            /**
             * Name of a role
             */
            name?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * Information about this version of kubernetes
         */
        version_info?: {
          /**
           * Date version was built
           */
          build_date?: string;
          /**
           * Kubernetes major version
           */
          major?: string;
          /**
           * Version of GO used for kubernetes
           */
          go_version?: string;
          git_version?: string;
          /**
           * Platform it was compiled for
           */
          platform?: string;
          /**
           * Hash of git commit version is built from
           */
          git_commit?: string;
          /**
           * State of the tree when build
           */
          git_tree_state?: string;
          /**
           * Kubernetes minor version
           */
          minor?: string;
          /**
           * Go Compiler user
           */
          compiler?: string;
          [k: string]: unknown;
        };
        /**
         * If true, Kubernetes was detected on this machine.
         */
        supported?: boolean;
        /**
         * True if the dashboard is running and accessible
         */
        dashboard_running?: boolean;
        nodes?: {
          items?: {
            /**
             * Status of the Node
             */
            status?: {
              /**
               * AttachedVolume describes a volume attached to a node
               */
              volumes_attached?: {
                /**
                 * DevicePath represents the device path where the volume should be available
                 */
                device_path?: string;
                /**
                 * Name of the attached volume
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * NodeDaemonEndpoints lists ports opened by daemons running on the Node.
               */
              daemon_endpoints?: {
                /**
                 * Endpoint on which Kubelet is listening
                 */
                kubelet_endpoint?: {
                  /**
                   * port on which Kubelet is listening
                   */
                  port?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * address reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses
               */
              addresses?: {
                /**
                 * Node address type, one of Hostname, ExternalIP or InternalIP.
                 */
                type?: string;
                /**
                 * the node address, IP/URL
                 */
                address?: string;
                [k: string]: unknown;
              };
              /**
               * General information about the node, such as kernel version, Kubernetes version (kubelet and kube-proxy version), Docker version (if used), OS name. The information is gathered by Kubelet from the node
               */
              node_info?: {
                /**
                 * kube Proxy Version
                 */
                kube_proxy_version?: string;
                /**
                 * OS family running on the container
                 */
                operating_system?: string;
                /**
                 * Container Software version
                 */
                container_runtime_version?: string;
                /**
                 * Kernel running on the node
                 */
                kernel_version?: string;
                /**
                 * Docker OS image running on the node
                 */
                os_image?: string;
                /**
                 * node's architecture
                 */
                architecture?: string;
                /**
                 * kubelet version
                 */
                kubelet_version?: string;
                [k: string]: unknown;
              };
              /**
               * List of attachable volumes in use (mounted) by the node
               */
              volumes_in_use?: string;
              /**
               * List of container images on this node
               */
              images?: {
                /**
                 * Names by which this image is known. e.g. ['k8s.gcr.io/hyperkube:v1.0.7', 'dockerhub.io/google_containers/hyperkube:v1.0.7']
                 */
                names?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
             */
            metadata?: {
              /**
               * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
               */
              name?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        endpoints?: {
          items?: {
            subsets?: {
              addresses?: {
                ip?: string;
                hostname?: string;
                node_name?: string;
                [k: string]: unknown;
              };
              ports?: {
                protocol?: string;
                name?: string;
                port?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            metadata?: {
              self_link?: string;
              name?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        pods?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p587?: {
    smtp?: {
      starttls?: {
        /**
         * The response to the EHLO command.
         */
        ehlo?: string;
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          /**
           * The server's TLS certificate.
           */
          certificate?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * Additional certificates provided by the server.
           */
          chain?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * The response to the STARTTLS command.
         */
        starttls?: string;
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        /**
         * The initial SMTP command sent by the server (e.g. "220 localhost.localdomain ESMTP Postfix (Ubuntu)\r\n"
         */
        banner?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  tags?: string;
  p1911?: {
    fox?: {
      device_id?: {
        vm_name?: string;
        version?: string;
        host_address?: string;
        vm_version?: string;
        app_name?: string;
        language?: string;
        os_version?: string;
        auth_agent_type?: string;
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        support?: boolean;
        hostname?: string;
        time_zone?: string;
        brand_id?: string;
        os_name?: string;
        vm_uuid?: string;
        sys_info?: string;
        host_id?: string;
        station_name?: string;
        app_version?: string;
        id?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p1883?: {
    mqtt?: {
      banner?: {
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          /**
           * The server's TLS certificate.
           */
          certificate?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          chain?: {
            fingerprints?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's SubjectPublicKeyInfo, as a hexadecimal string.
               */
              spki_subject?: string;
              /**
               * The SHA1 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha1?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, as a hexadecimal string.
               */
              tbs?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, *with any CT extensions omitted*, as a hexadecimal string.
               */
              tbs_noct?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha256?: string;
              /**
               * The MD5 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              md5?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * If true, MQTT was detected on this machine.
         */
        supported?: boolean;
        /**
         * Raw CONNACK response packet
         */
        raw_conn_ack?: string;
        connack?: {
          /**
           * Raw connect status value
           */
          raw?: string;
          /**
           * Connection status
           */
          connect_return?: string;
          [k: string]: unknown;
        };
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p5632?: {
    pca?: {
      banner?: {
        status?: {
          /**
           * Full 'ST' query response
           */
          st_raw?: string;
          /**
           * Workstation is In Use if true, Available if false
           */
          in_use?: boolean;
          [k: string]: unknown;
        };
        /**
         * Workstation Name, with padding bytes removed
         */
        workstation_name?: string;
        /**
         * If true, PCA was detected on this machine.
         */
        supported?: boolean;
        /**
         * Full 'NR' query response
         */
        nr_raw?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p1433?: {
    mssql?: {
      banner?: {
        /**
         * The TLS handshake with the server (for non-encrypted connections, this used only for the authentication phase).
         */
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          /**
           * The server's TLS certificate.
           */
          certificate?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * Additional certificates provided by the server.
           */
          chain?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * If true, MSSQL was detected on this machine.
         */
        supported?: boolean;
        /**
         * The negotiated encryption mode for the session. See https://msdn.microsoft.com/en-us/library/dd357559.aspx for details.
         */
        encrypt_mode?: string;
        /**
         * The value of the INSTANCE field returned by the server in the PRELOGIN response.
         */
        instance_name?: string;
        /**
         * The MSSQL version returned by the server in the PRELOGIN response. Its format is 'MAJOR.MINOR.BUILD_NUMBER'.
         */
        version?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p8080?: {
    http?: {
      get?: {
        /**
         * The HTTP body, truncated according to configured MaxSize (default 256kb).
         */
        body?: string;
        /**
         * HTTP response headers. Names are normalized by converting them to lowercase and replacing hyphens with underscores. When a header is returned multiple times, only the first is included. Values are truncated to 256 bytes.
         */
        headers?: {
          /**
           * The value of the content_length header.
           */
          content_length?: string;
          /**
           * The value of the x-ua-compatible header.
           */
          x_ua_compatible?: string;
          /**
           * The value of the via header.
           */
          via?: string;
          /**
           * The value of the pragma header.
           */
          pragma?: string;
          /**
           * The value of the set_cookie header.
           */
          set_cookie?: string;
          /**
           * The value of the x-powered-by header.
           */
          x_powered_by?: string;
          /**
           * The value of the vary header.
           */
          vary?: string;
          /**
           * The value of the retry_after header.
           */
          retry_after?: string;
          /**
           * The value of the www-authenticate header.
           */
          www_authenticate?: string;
          /**
           * The value of the warning header.
           */
          warning?: string;
          /**
           * The value of the content_language header.
           */
          content_language?: string;
          /**
           * The value of the content_location header.
           */
          content_location?: string;
          /**
           * The value of the p3p header.
           */
          p3p?: string;
          /**
           * The value of the server header.
           */
          server?: string;
          /**
           * The value of the proxy-authenticate header.
           */
          proxy_authenticate?: string;
          /**
           * The value of the proxy-agent header.
           */
          proxy_agent?: string;
          /**
           * The value of the upgrade header.
           */
          upgrade?: string;
          /**
           * Other headers are included as a list of key, value pairs.
           */
          unknown?: {
            value?: string;
            key?: string;
            [k: string]: unknown;
          };
          /**
           * The value of the x-content-type-options header.
           */
          x_content_type_options?: string;
          /**
           * The value of the x-content-security-policy header.
           */
          x_content_security_policy?: string;
          /**
           * The value of the etag header.
           */
          etag?: string;
          /**
           * The value of the content_range header.
           */
          content_range?: string;
          /**
           * The value of the content_encoding header.
           */
          content_encoding?: string;
          /**
           * The value of the access-control-allow-origin header.
           */
          access_control_allow_origin?: string;
          /**
           * The value of the content_md5 header.
           */
          content_md5?: string;
          /**
           * The value of the content_disposition header.
           */
          content_disposition?: string;
          /**
           * The value of the cache_control header.
           */
          cache_control?: string;
          /**
           * The value of the location header.
           */
          location?: string;
          /**
           * The value of the status header.
           */
          status?: string;
          /**
           * The value of the strict-transport-security header.
           */
          strict_transport_security?: string;
          /**
           * The value of the expires header.
           */
          expires?: string;
          /**
           * The value of the accept-patch header.
           */
          accept_patch?: string;
          /**
           * The value of the last_modified header.
           */
          last_modified?: string;
          /**
           * The value of the link header.
           */
          link?: string;
          /**
           * The value of the content_type header.
           */
          content_type?: string;
          /**
           * The value of the date header.
           */
          date?: string;
          /**
           * The value of the x-frame-options header.
           */
          x_frame_options?: string;
          /**
           * The value of the x-webkit-csp header.
           */
          x_webkit_csp?: string;
          /**
           * The value of the x-real-ip header.
           */
          x_real_ip?: string;
          /**
           * The value of the alternate_protocol header.
           */
          alternate_protocol?: string;
          /**
           * The value of the accept-ranges header.
           */
          accept_ranges?: string;
          /**
           * The value of the age header.
           */
          age?: string;
          /**
           * The value of the x-xss-protection header.
           */
          x_xss_protection?: string;
          /**
           * The value of the x-forwarded-for header.
           */
          x_forwarded_for?: string;
          /**
           * The value of the refresh header.
           */
          refresh?: string;
          /**
           * The value of the public-key-pins header.
           */
          public_key_pins?: string;
          /**
           * The value of the connection header.
           */
          connection?: string;
          /**
           * The value of the x-content-duration header.
           */
          x_content_duration?: string;
          /**
           * The value of the alt-svc header.
           */
          alt_svc?: string;
          /**
           * The value of the allow header.
           */
          allow?: string;
          /**
           * The value of the referer header.
           */
          referer?: string;
          /**
           * The value of the content-security-policy header.
           */
          content_security_policy?: string;
          /**
           * The value of the transfer_encoding header.
           */
          transfer_encoding?: string;
          /**
           * The value of the trailer header.
           */
          trailer?: string;
          [k: string]: unknown;
        };
        /**
         * The HTTP status code (e.g. 200, 404, 503).
         */
        status_code?: string;
        /**
         * The contents of the first TITLE tag in the body (stripped of any surrounding whitespace and truncated to 1024 characters).
         */
        title?: string;
        /**
         * The full status line returned by the server (e.g. "200 OK" or "401 UNAUTHORIZED")
         */
        status_line?: string;
        /**
         * The SHA2-256 digest of the body. NOTE: This digest is calculated using the same data returned in the body field, so if that was truncated, this will be calculated over the truncated body, rather than full data stored on the server.
         */
        body_sha256?: string;
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p102?: {
    s7?: {
      /**
       * Parsed response data from the Siemens S7 scan.
       */
      szl?: {
        /**
         * The seventh string in the response to the S7_SZL_MODULE_IDENTIFICATION request.
         */
        firmware?: string;
        /**
         * The eighth string in the response to the S7_SZL_COMPONENT_IDENTIFICATION request.
         */
        memory_serial_number?: string;
        /**
         * The seventh string in the response to the S7_SZL_COMPONENT_IDENTIFICATION request.
         */
        reserved_for_os?: string;
        /**
         * The fourth string in the response to the S7_SZL_COMPONENT_IDENTIFICATION request.
         */
        copyright?: string;
        /**
         * The third string in the response to the S7_SZL_COMPONENT_IDENTIFICATION request.
         */
        plant_id?: string;
        /**
         * Indicates that the scanner was able to successfully negotiate a Siemens S7 session with the server.
         */
        support?: boolean;
        /**
         * The ninth string in the response to the S7_SZL_COMPONENT_IDENTIFICATION request.
         */
        cpu_profile?: string;
        /**
         * The fifth string in the response to the S7_SZL_COMPONENT_IDENTIFICATION request.
         */
        serial_number?: string;
        /**
         * The second string in the response to the S7_SZL_COMPONENT_IDENTIFICATION request.
         */
        module?: string;
        /**
         * The first string in the response to the S7_SZL_COMPONENT_IDENTIFICATION request.
         */
        system?: string;
        /**
         * The sixth string in the response to the S7_SZL_MODULE_IDENTIFICATION request.
         */
        hardware?: string;
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        /**
         * The sixth string in the response to the S7_SZL_COMPONENT_IDENTIFICATION request.
         */
        module_type?: string;
        /**
         * The eleventh string in the response to the S7_SZL_COMPONENT_IDENTIFICATION request.
         */
        location?: string;
        /**
         * The tenth string in the response to the S7_SZL_COMPONENT_IDENTIFICATION request.
         */
        oem_id?: string;
        /**
         * The first string in the response to the S7_SZL_MODULE_IDENTIFICATION request.
         */
        module_id?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  protocols?: string;
  p47808?: {
    bacnet?: {
      device_id?: {
        vendor?: {
          reported_name?: string;
          id?: string;
          official_name?: string;
          [k: string]: unknown;
        };
        description?: string;
        firmware_revision?: string;
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        support?: boolean;
        instance_number?: string;
        object_name?: string;
        location?: string;
        application_software_revision?: string;
        model_name?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p6379?: {
    redis?: {
      banner?: {
        /**
         * Major is the version's major number.
         */
        major?: string;
        /**
         * If true, Redis was detected on this machine.
         */
        supported?: boolean;
        /**
         * The Sha-1 Git commit hash the Redis server used.
         */
        git_sha1?: string;
        /**
         * The Build ID of the Redis server.
         */
        build_id?: string;
        /**
         * The version of the GCC compiler used to compile the Redis server.
         */
        gcc_version?: string;
        /**
         * The total number of bytes allocated by Redis using its allocator.
         */
        used_memory?: string;
        /**
         * The response from the NONEXISTENT command.
         */
        nonexistent_response?: string;
        /**
         * The version string, read from the the info_response (if available).
         */
        version?: string;
        /**
         * The total number of commands processed by the server.
         */
        total_commands_processed?: string;
        /**
         * The response from the INFO command. Should be a series of key:value pairs separated by CRLFs.
         */
        info_response?: string;
        /**
         * Minor is the version's minor number.
         */
        minor?: string;
        /**
         * The mode the Redis server is running (standalone or cluster), read from the the info_response (if available).
         */
        mode?: string;
        /**
         * The total number of connections accepted by the server.
         */
        total_connections_received?: string;
        /**
         * The response to the QUIT command.
         */
        quit_response?: string;
        /**
         * The architecture bits (32 or 64) the Redis server used to build.
         */
        arch_bits?: string;
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          certificate?: {
            fingerprints?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's SubjectPublicKeyInfo, as a hexadecimal string.
               */
              spki_subject?: string;
              /**
               * The SHA1 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha1?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, as a hexadecimal string.
               */
              tbs?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, *with any CT extensions omitted*, as a hexadecimal string.
               */
              tbs_noct?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha256?: string;
              /**
               * The MD5 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              md5?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          chain?: {
            fingerprints?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's SubjectPublicKeyInfo, as a hexadecimal string.
               */
              spki_subject?: string;
              /**
               * The SHA1 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha1?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, as a hexadecimal string.
               */
              tbs?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, *with any CT extensions omitted*, as a hexadecimal string.
               */
              tbs_noct?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha256?: string;
              /**
               * The MD5 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              md5?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * The memory allocator.
         */
        mem_allocator?: string;
        /**
         * The number of seconds since Redis server start.
         */
        uptime_in_seconds?: string;
        /**
         * The response from the PING command; should either be "PONG" or an authentication error.
         */
        ping_response?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        /**
         * The OS the Redis server is running, read from the the info_response (if available).
         */
        os?: string;
        /**
         * Patchlevel is the version's patchlevel number.
         */
        patchlevel?: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p5432?: {
    postgres?: {
      banner?: {
        /**
         * If the server allows upgrading the session to use TLS, this is the log of the handshake.
         */
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          /**
           * The server's TLS certificate.
           */
          certificate?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * Additional certificates provided by the server.
           */
          chain?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        backend_key_data?: {
          secret_key?: string;
          process_id?: string;
          [k: string]: unknown;
        };
        /**
         * The error string returned by the server in response to a StartupMessage with ProtocolVersion = 0.0
         */
        supported_versions?: string;
        protocol_error?: {
          code?: string;
          severity?: string;
          internal_position?: string;
          constraint?: string;
          routine?: string;
          table?: string;
          hint?: string;
          internal_query?: string;
          detail?: string;
          where?: string;
          severity_v?: string;
          file?: string;
          _unknown_error_tag?: string;
          position?: string;
          line?: string;
          data?: string;
          message?: string;
          schema?: string;
          [k: string]: unknown;
        };
        /**
         * If the server supports TLS and the session was updated to use TLS, this is true.
         */
        is_ssl?: boolean;
        /**
         * If true, PostgreSQL was detected on this machine.
         */
        supported?: boolean;
        startup_error?: {
          code?: string;
          severity?: string;
          internal_position?: string;
          constraint?: string;
          routine?: string;
          table?: string;
          hint?: string;
          internal_query?: string;
          detail?: string;
          where?: string;
          severity_v?: string;
          file?: string;
          _unknown_error_tag?: string;
          position?: string;
          line?: string;
          data?: string;
          message?: string;
          schema?: string;
          [k: string]: unknown;
        };
        authentication_mode?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  notes?: string;
  p502?: {
    modbus?: {
      device_id?: {
        /**
         * Requested function type; see http://www.modbus.org/docs/Modbus_Application_Protocol_V1_1b.pdf
         */
        function_code?: string;
        /**
         * Indicates whether the server supports modbus.
         */
        support?: boolean;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        /**
         * See http://www.modbus.org/docs/Modbus_Application_Protocol_V1_1b.pdf
         */
        mei_response?: {
          objects?: {
            user_application_name?: string;
            /**
             * Mandatory ASCII string on all objects. Names the vendor.
             */
            vendor?: string;
            product_name?: string;
            product_code?: string;
            model_name?: string;
            vendor_url?: string;
            revision?: string;
            [k: string]: unknown;
          };
          /**
           * Identification conformity level of the device and type of supported access
           */
          conformity_level?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  metadata?: {
    product?: string;
    description?: string;
    revision?: string;
    os_version?: string;
    version?: string;
    device_type?: string;
    manufacturer?: string;
    os?: string;
    os_description?: string;
    [k: string]: unknown;
  };
  p7547?: {
    cwmp?: {
      get?: {
        /**
         * The HTTP body, truncated according to configured MaxSize (default 256kb).
         */
        body?: string;
        /**
         * HTTP response headers. Names are normalized by converting them to lowercase and replacing hyphens with underscores. When a header is returned multiple times, only the first is included. Values are truncated to 256 bytes.
         */
        headers?: {
          /**
           * The value of the content_length header.
           */
          content_length?: string;
          /**
           * The value of the x-ua-compatible header.
           */
          x_ua_compatible?: string;
          /**
           * The value of the via header.
           */
          via?: string;
          /**
           * The value of the pragma header.
           */
          pragma?: string;
          /**
           * The value of the set_cookie header.
           */
          set_cookie?: string;
          /**
           * The value of the x-powered-by header.
           */
          x_powered_by?: string;
          /**
           * The value of the vary header.
           */
          vary?: string;
          /**
           * The value of the retry_after header.
           */
          retry_after?: string;
          /**
           * The value of the www-authenticate header.
           */
          www_authenticate?: string;
          /**
           * The value of the warning header.
           */
          warning?: string;
          /**
           * The value of the content_language header.
           */
          content_language?: string;
          /**
           * The value of the content_location header.
           */
          content_location?: string;
          /**
           * The value of the p3p header.
           */
          p3p?: string;
          /**
           * The value of the server header.
           */
          server?: string;
          /**
           * The value of the proxy-authenticate header.
           */
          proxy_authenticate?: string;
          /**
           * The value of the proxy-agent header.
           */
          proxy_agent?: string;
          /**
           * The value of the upgrade header.
           */
          upgrade?: string;
          /**
           * Other headers are included as a list of key, value pairs.
           */
          unknown?: {
            value?: string;
            key?: string;
            [k: string]: unknown;
          };
          /**
           * The value of the x-content-type-options header.
           */
          x_content_type_options?: string;
          /**
           * The value of the x-content-security-policy header.
           */
          x_content_security_policy?: string;
          /**
           * The value of the etag header.
           */
          etag?: string;
          /**
           * The value of the content_range header.
           */
          content_range?: string;
          /**
           * The value of the content_encoding header.
           */
          content_encoding?: string;
          /**
           * The value of the access-control-allow-origin header.
           */
          access_control_allow_origin?: string;
          /**
           * The value of the content_md5 header.
           */
          content_md5?: string;
          /**
           * The value of the content_disposition header.
           */
          content_disposition?: string;
          /**
           * The value of the cache_control header.
           */
          cache_control?: string;
          /**
           * The value of the location header.
           */
          location?: string;
          /**
           * The value of the status header.
           */
          status?: string;
          /**
           * The value of the strict-transport-security header.
           */
          strict_transport_security?: string;
          /**
           * The value of the expires header.
           */
          expires?: string;
          /**
           * The value of the accept-patch header.
           */
          accept_patch?: string;
          /**
           * The value of the last_modified header.
           */
          last_modified?: string;
          /**
           * The value of the link header.
           */
          link?: string;
          /**
           * The value of the content_type header.
           */
          content_type?: string;
          /**
           * The value of the date header.
           */
          date?: string;
          /**
           * The value of the x-frame-options header.
           */
          x_frame_options?: string;
          /**
           * The value of the x-webkit-csp header.
           */
          x_webkit_csp?: string;
          /**
           * The value of the x-real-ip header.
           */
          x_real_ip?: string;
          /**
           * The value of the alternate_protocol header.
           */
          alternate_protocol?: string;
          /**
           * The value of the accept-ranges header.
           */
          accept_ranges?: string;
          /**
           * The value of the age header.
           */
          age?: string;
          /**
           * The value of the x-xss-protection header.
           */
          x_xss_protection?: string;
          /**
           * The value of the x-forwarded-for header.
           */
          x_forwarded_for?: string;
          /**
           * The value of the refresh header.
           */
          refresh?: string;
          /**
           * The value of the public-key-pins header.
           */
          public_key_pins?: string;
          /**
           * The value of the connection header.
           */
          connection?: string;
          /**
           * The value of the x-content-duration header.
           */
          x_content_duration?: string;
          /**
           * The value of the alt-svc header.
           */
          alt_svc?: string;
          /**
           * The value of the allow header.
           */
          allow?: string;
          /**
           * The value of the referer header.
           */
          referer?: string;
          /**
           * The value of the content-security-policy header.
           */
          content_security_policy?: string;
          /**
           * The value of the transfer_encoding header.
           */
          transfer_encoding?: string;
          /**
           * The value of the trailer header.
           */
          trailer?: string;
          [k: string]: unknown;
        };
        /**
         * The HTTP status code (e.g. 200, 404, 503).
         */
        status_code?: string;
        /**
         * The contents of the first TITLE tag in the body (stripped of any surrounding whitespace and truncated to 1024 characters).
         */
        title?: string;
        /**
         * The full status line returned by the server (e.g. "200 OK" or "401 UNAUTHORIZED")
         */
        status_line?: string;
        /**
         * The SHA2-256 digest of the body. NOTE: This digest is calculated using the same data returned in the body field, so if that was truncated, this will be calculated over the truncated body, rather than full data stored on the server.
         */
        body_sha256?: string;
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  ports?: string;
  p993?: {
    imaps?: {
      tls?: {
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          /**
           * The server's TLS certificate.
           */
          certificate?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * Additional certificates provided by the server.
           */
          chain?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        /**
         * The IMAP/POP3 command sent by the server as soon as the TLS handshake completes.
         */
        banner?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p143?: {
    imap?: {
      starttls?: {
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          /**
           * The server's TLS certificate.
           */
          certificate?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * Additional certificates provided by the server.
           */
          chain?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        /**
         * The response to the starttls command.
         */
        starttls?: string;
        /**
         * The IMAP/POP3 command sent by the server immediately upon connection.
         */
        banner?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p9200?: {
    elasticsearch?: {
      banner?: {
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          /**
           * The server's TLS certificate.
           */
          certificate?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          chain?: {
            fingerprints?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's SubjectPublicKeyInfo, as a hexadecimal string.
               */
              spki_subject?: string;
              /**
               * The SHA1 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha1?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, as a hexadecimal string.
               */
              tbs?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, *with any CT extensions omitted*, as a hexadecimal string.
               */
              tbs_noct?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha256?: string;
              /**
               * The MD5 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              md5?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        nodes_info?: {
          cluster?: {
            status?: string;
            timestamp?: string;
            uuid?: string;
            name?: string;
            filesystem?: {
              /**
               * Human-friendly available size
               */
              available?: string;
              /**
               * Total size in bytes
               */
              total_in_bytes?: string;
              /**
               * Free size in bytes
               */
              free_in_bytes?: string;
              /**
               * Human-friendly free size
               */
              free?: string;
              /**
               * Human-friendly total size
               */
              total?: string;
              /**
               * Available size in bytes
               */
              available_in_bytes?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          nodes?: {
            node_info?: {
              name?: string;
              roles?: string;
              settings?: {
                node?: {
                  attr?: {
                    ml?: {
                      enabled?: string;
                      machine_memory?: string;
                      max_open_jobs?: string;
                      [k: string]: unknown;
                    };
                    xpack?: {
                      installed?: string;
                      [k: string]: unknown;
                    };
                    [k: string]: unknown;
                  };
                  name?: string;
                  [k: string]: unknown;
                };
                cluster?: {
                  name?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              thread_pool_list?: {
                thread_name?: string;
                min?: string;
                max?: string;
                keep_alive?: string;
                queue_size?: string;
                type?: string;
                [k: string]: unknown;
              };
              ip?: string;
              build_flavor?: string;
              modules?: {
                has_native_controller?: boolean;
                description?: string;
                java_version?: string;
                classname?: string;
                version?: string;
                elasticsearch_version?: string;
                extended_plugins?: string;
                name?: string;
                [k: string]: unknown;
              };
              ingest?: {
                processors?: {
                  type?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              total_indexing_buffer?: string;
              host?: string;
              version?: string;
              jvm?: {
                vm_name?: string;
                vm_version?: string;
                start_time?: string;
                gc_collectors?: string;
                input_arguments?: string;
                vm_vendor?: string;
                version?: string;
                memory_pools?: string;
                start_time_in_millis?: string;
                [k: string]: unknown;
              };
              build_hash?: string;
              os?: {
                name?: string;
                pretty_name?: string;
                allocated_processors?: string;
                version?: string;
                arch?: string;
                refresh_interval_in_millis?: string;
                available_processors?: string;
                [k: string]: unknown;
              };
              build_type?: string;
              [k: string]: unknown;
            };
            node_name?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * If true, Elasticsearch was detected on this machine.
         */
        supported?: boolean;
        system_info?: {
          /**
           * Cluster UUID
           */
          cluster_uuid?: string;
          /**
           * Elasticsearch identifying tagline
           */
          tagline?: string;
          version?: {
            build_date?: string;
            minimum_wire_compatibility_version?: string;
            build_hash?: string;
            /**
             * ES Cluster version
             */
            number?: string;
            build_type?: string;
            minimum_index_compatibility_version?: string;
            build_flavor?: string;
            build_snapshot?: boolean;
            lucene_version?: string;
            [k: string]: unknown;
          };
          /**
           * Cluster Name
           */
          name?: string;
          [k: string]: unknown;
        };
        http_info?: {
          headers?: {
            content_length?: string;
            x_ua_compatible?: string;
            via?: string;
            pragma?: string;
            set_cookie?: string;
            x_powered_by?: string;
            vary?: string;
            retry_after?: string;
            warning?: string;
            content_language?: string;
            content_location?: string;
            p3p?: string;
            server?: string;
            proxy_authenticate?: string;
            proxy_agent?: string;
            upgrade?: string;
            unknown?: {
              value?: string;
              key?: string;
              [k: string]: unknown;
            };
            x_content_type_options?: string;
            x_content_security_policy?: string;
            www_authenticate?: string;
            content_range?: string;
            content_encoding?: string;
            access_control_allow_origin?: string;
            content_md5?: string;
            content_disposition?: string;
            cache_control?: string;
            location?: string;
            status?: string;
            strict_transport_security?: string;
            expires?: string;
            accept_patch?: string;
            last_modified?: string;
            link?: string;
            content_type?: string;
            date?: string;
            x_frame_options?: string;
            x_webkit_csp?: string;
            x_real_ip?: string;
            alternate_protocol?: string;
            accept_ranges?: string;
            age?: string;
            x_xss_protection?: string;
            x_forwarded_for?: string;
            refresh?: string;
            public_key_pins?: string;
            connection?: string;
            x_content_duration?: string;
            alt_svc?: string;
            allow?: string;
            referer?: string;
            content_security_policy?: string;
            transfer_encoding?: string;
            trailer?: string;
            [k: string]: unknown;
          };
          status_line?: string;
          status_code?: string;
          [k: string]: unknown;
        };
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p16992?: {
    http?: {
      get?: {
        /**
         * The HTTP body, truncated according to configured MaxSize (default 256kb).
         */
        body?: string;
        /**
         * HTTP response headers. Names are normalized by converting them to lowercase and replacing hyphens with underscores. When a header is returned multiple times, only the first is included. Values are truncated to 256 bytes.
         */
        headers?: {
          /**
           * The value of the content_length header.
           */
          content_length?: string;
          /**
           * The value of the x-ua-compatible header.
           */
          x_ua_compatible?: string;
          /**
           * The value of the via header.
           */
          via?: string;
          /**
           * The value of the pragma header.
           */
          pragma?: string;
          /**
           * The value of the set_cookie header.
           */
          set_cookie?: string;
          /**
           * The value of the x-powered-by header.
           */
          x_powered_by?: string;
          /**
           * The value of the vary header.
           */
          vary?: string;
          /**
           * The value of the retry_after header.
           */
          retry_after?: string;
          /**
           * The value of the www-authenticate header.
           */
          www_authenticate?: string;
          /**
           * The value of the warning header.
           */
          warning?: string;
          /**
           * The value of the content_language header.
           */
          content_language?: string;
          /**
           * The value of the content_location header.
           */
          content_location?: string;
          /**
           * The value of the p3p header.
           */
          p3p?: string;
          /**
           * The value of the server header.
           */
          server?: string;
          /**
           * The value of the proxy-authenticate header.
           */
          proxy_authenticate?: string;
          /**
           * The value of the proxy-agent header.
           */
          proxy_agent?: string;
          /**
           * The value of the upgrade header.
           */
          upgrade?: string;
          /**
           * Other headers are included as a list of key, value pairs.
           */
          unknown?: {
            value?: string;
            key?: string;
            [k: string]: unknown;
          };
          /**
           * The value of the x-content-type-options header.
           */
          x_content_type_options?: string;
          /**
           * The value of the x-content-security-policy header.
           */
          x_content_security_policy?: string;
          /**
           * The value of the etag header.
           */
          etag?: string;
          /**
           * The value of the content_range header.
           */
          content_range?: string;
          /**
           * The value of the content_encoding header.
           */
          content_encoding?: string;
          /**
           * The value of the access-control-allow-origin header.
           */
          access_control_allow_origin?: string;
          /**
           * The value of the content_md5 header.
           */
          content_md5?: string;
          /**
           * The value of the content_disposition header.
           */
          content_disposition?: string;
          /**
           * The value of the cache_control header.
           */
          cache_control?: string;
          /**
           * The value of the location header.
           */
          location?: string;
          /**
           * The value of the status header.
           */
          status?: string;
          /**
           * The value of the strict-transport-security header.
           */
          strict_transport_security?: string;
          /**
           * The value of the expires header.
           */
          expires?: string;
          /**
           * The value of the accept-patch header.
           */
          accept_patch?: string;
          /**
           * The value of the last_modified header.
           */
          last_modified?: string;
          /**
           * The value of the link header.
           */
          link?: string;
          /**
           * The value of the content_type header.
           */
          content_type?: string;
          /**
           * The value of the date header.
           */
          date?: string;
          /**
           * The value of the x-frame-options header.
           */
          x_frame_options?: string;
          /**
           * The value of the x-webkit-csp header.
           */
          x_webkit_csp?: string;
          /**
           * The value of the x-real-ip header.
           */
          x_real_ip?: string;
          /**
           * The value of the alternate_protocol header.
           */
          alternate_protocol?: string;
          /**
           * The value of the accept-ranges header.
           */
          accept_ranges?: string;
          /**
           * The value of the age header.
           */
          age?: string;
          /**
           * The value of the x-xss-protection header.
           */
          x_xss_protection?: string;
          /**
           * The value of the x-forwarded-for header.
           */
          x_forwarded_for?: string;
          /**
           * The value of the refresh header.
           */
          refresh?: string;
          /**
           * The value of the public-key-pins header.
           */
          public_key_pins?: string;
          /**
           * The value of the connection header.
           */
          connection?: string;
          /**
           * The value of the x-content-duration header.
           */
          x_content_duration?: string;
          /**
           * The value of the alt-svc header.
           */
          alt_svc?: string;
          /**
           * The value of the allow header.
           */
          allow?: string;
          /**
           * The value of the referer header.
           */
          referer?: string;
          /**
           * The value of the content-security-policy header.
           */
          content_security_policy?: string;
          /**
           * The value of the transfer_encoding header.
           */
          transfer_encoding?: string;
          /**
           * The value of the trailer header.
           */
          trailer?: string;
          [k: string]: unknown;
        };
        /**
         * The HTTP status code (e.g. 200, 404, 503).
         */
        status_code?: string;
        /**
         * The contents of the first TITLE tag in the body (stripped of any surrounding whitespace and truncated to 1024 characters).
         */
        title?: string;
        /**
         * The full status line returned by the server (e.g. "200 OK" or "401 UNAUTHORIZED")
         */
        status_line?: string;
        /**
         * The SHA2-256 digest of the body. NOTE: This digest is calculated using the same data returned in the body field, so if that was truncated, this will be calculated over the truncated body, rather than full data stored on the server.
         */
        body_sha256?: string;
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p631?: {
    ipp?: {
      banner?: {
        /**
         * If the server allows upgrading the session to use TLS, this is the log of the handshake.
         */
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          /**
           * The server's TLS certificate.
           */
          certificate?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * Additional certificates provided by the server.
           */
          chain?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * The specific IPP version returned in response to an IPP get-printer-attributes request. Always in the form 'IPP/x.y'
         */
        version_string?: string;
        /**
         * If true, IPP was detected on this machine.
         */
        supported?: boolean;
        /**
         * Major component of IPP version listed in the Server header of a response to an IPP get-printer-attributes request.
         */
        version_major?: string;
        /**
         * The CUPS version, if any, specified in the list of attributes returned in a get-printer-attributes response or CUPS-get-printers response. Generally in the form 'x.y.z'.
         */
        attr_cups_version?: string;
        /**
         * Each IPP version, if any, specified in the list of attributes returned in a get-printer-attributes response or CUPS-get-printers response. Always in the form 'x.y'.
         */
        attr_ipp_versions?: string;
        /**
         * The CUPS version, if any, specified in the Server header of an IPP get-attributes response.
         */
        cups_version?: string;
        /**
         * Each printer URI, if any, specified in the list of attributes returned in a get-printer-attributes response or CUPS-get-printers response. Uses ipp(s) or http(s) scheme, followed by a hostname or IP, and then the path to a particular printer.
         */
        attr_printer_uris?: string;
        /**
         * All IPP attributes included in any contentful responses obtained. Each has a name, list of values (potentially only one), and a tag denoting how the value should be interpreted.
         */
        attributes?: {
          tag?: string;
          values?: {
            memberAttrName?: string;
            octetString?: string;
            charset?: string;
            keyword?: string;
            bagCollection?: string;
            rangeOfInteger?: string;
            enum?: string;
            uri?: string;
            dateTime?: string;
            raw?: string;
            nameWithoutLanguage?: string;
            boolean?: boolean;
            endCollection?: string;
            mimeMediaType?: string;
            integer?: string;
            naturalLanguage?: string;
            textWithLanguage?: string;
            resolution?: string;
            uriScheme?: string;
            textWithoutLanguage?: string;
            nameWithLanguage?: string;
            [k: string]: unknown;
          };
          name?: string;
          [k: string]: unknown;
        };
        /**
         * Minor component of IPP version listed in the Server header of a response to an IPP get-printer-attributes request.
         */
        version_minor?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p995?: {
    pop3s?: {
      tls?: {
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          /**
           * The server's TLS certificate.
           */
          certificate?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * Additional certificates provided by the server.
           */
          chain?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        /**
         * The IMAP/POP3 command sent by the server as soon as the TLS handshake completes.
         */
        banner?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p445?: {
    smb?: {
      banner?: {
        smbv1_support?: boolean;
        /**
         * If true, SMB was detected on this machine.
         */
        supported?: boolean;
        negotiation_log?: {
          status?: string;
          security_mode?: string;
          system_time?: string;
          server_start_time?: string;
          protocol_id?: string;
          capabilities?: string;
          server_guid?: string;
          credits?: string;
          dialect_revision?: string;
          command?: string;
          authentication_types?: string;
          flags?: string;
          [k: string]: unknown;
        };
        smb_version?: {
          /**
           * Major version
           */
          major?: string;
          /**
           * Full SMB Version String
           */
          version_string?: string;
          /**
           * Minor version
           */
          minor?: string;
          /**
           * Protocol Revision
           */
          revision?: string;
          [k: string]: unknown;
        };
        session_setup_log?: {
          status?: string;
          protocol_id?: string;
          target_name?: string;
          negotiate_flags?: string;
          setup_flags?: string;
          credits?: string;
          command?: string;
          flags?: string;
          [k: string]: unknown;
        };
        /**
         * Capabilities flags for the connection. See [MS-SMB2] Sect. 2.2.4.
         */
        smb_capabilities?: {
          /**
           * Server supports multi-credit operations
           */
          smb_multicredit_support?: boolean;
          /**
           * Server supports multiple channels per session
           */
          smb_multchan_support?: boolean;
          /**
           * Server supports persistent handles
           */
          smb_persistent_handle_support?: boolean;
          /**
           * Server supports Distributed File System
           */
          smb_dfs_support?: boolean;
          /**
           * Server supports Leasing
           */
          smb_leasing_support?: boolean;
          /**
           * Server supports encryption
           */
          smb_encryption_support?: boolean;
          /**
           * Server supports directory leasing
           */
          smb_directory_leasing_support?: boolean;
          [k: string]: unknown;
        };
        has_ntlm?: boolean;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p443?: {
    https?: {
      tls?: {
        /**
         * The key data sent by the server in the TLS key exchange message.
         */
        server_key_exchange?: {
          /**
           * Parameters for the Diffie-Hellman key exchange.
           */
          dh_params?: {
            /**
             * The shared prime number.
             */
            prime?: {
              /**
               * The length of the parameter.
               */
              length?: string;
              /**
               * The value of the parameter.
               */
              value?: string;
              [k: string]: unknown;
            };
            /**
             * The server's public key.
             */
            server_public?: {
              /**
               * The length of the parameter.
               */
              length?: string;
              /**
               * The value of the parameter.
               */
              value?: string;
              [k: string]: unknown;
            };
            /**
             * The generator of the DH group.
             */
            generator?: {
              /**
               * The length of the parameter.
               */
              length?: string;
              /**
               * The value of the parameter.
               */
              value?: string;
              [k: string]: unknown;
            };
            /**
             * The client's private key. Usually does not coexist with server_private.
             */
            client_private?: {
              /**
               * The length of the parameter.
               */
              length?: string;
              /**
               * The value of the parameter.
               */
              value?: string;
              [k: string]: unknown;
            };
            /**
             * The server's private key. Usually does not coexist with client_private.
             */
            server_private?: {
              /**
               * The length of the parameter.
               */
              length?: string;
              /**
               * The value of the parameter.
               */
              value?: string;
              [k: string]: unknown;
            };
            /**
             * The client's public key.
             */
            client_public?: {
              /**
               * The length of the parameter.
               */
              length?: string;
              /**
               * The value of the parameter.
               */
              value?: string;
              [k: string]: unknown;
            };
            /**
             * The session key.
             */
            session_key?: {
              /**
               * The length of the parameter.
               */
              length?: string;
              /**
               * The value of the parameter.
               */
              value?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
           */
          rsa_params?: {
            /**
             * Bit-length of modulus.
             */
            length?: string;
            /**
             * The RSA key's modulus (n) in big-endian encoding.
             */
            modulus?: string;
            /**
             * The RSA key's public exponent (e).
             */
            exponent?: string;
            [k: string]: unknown;
          };
          signature?: {
            raw?: string;
            tls_version?: {
              /**
               * A human-readable version of the TLS version.
               */
              name?: string;
              /**
               * The TLS version identifier.
               */
              value?: string;
              [k: string]: unknown;
            };
            valid?: boolean;
            type?: string;
            /**
             * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
             */
            signature_and_hash_type?: {
              /**
               * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
               */
              hash_algorithm?: string;
              /**
               * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
               */
              signature_algorithm?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * Parameters for ECDH key exchange.
           */
          ecdh_params?: {
            /**
             * An elliptic curve point.
             */
            server_public?: {
              /**
               * Generic parameter for a cryptographic algorithm.
               */
              y?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * Generic parameter for a cryptographic algorithm.
               */
              x?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * An elliptic curve algorithm identifier.
             */
            curve_id?: {
              /**
               * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
               */
              id?: string;
              /**
               * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
               */
              name?: string;
              [k: string]: unknown;
            };
            /**
             * TLS key exchange parameters for ECDH keys.
             */
            server_private?: {
              length?: string;
              value?: string;
              [k: string]: unknown;
            };
            /**
             * An elliptic curve point.
             */
            client_public?: {
              /**
               * Generic parameter for a cryptographic algorithm.
               */
              y?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * Generic parameter for a cryptographic algorithm.
               */
              x?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * TLS key exchange parameters for ECDH keys.
             */
            client_private?: {
              length?: string;
              value?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * The signature error, if one occurred.
           */
          signature_error?: string;
          /**
           * The digest that is signed.
           */
          digest?: string;
          [k: string]: unknown;
        };
        /**
         * The server's TLS certificate.
         */
        certificate?: {
          parsed?: {
            /**
             * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
             */
            fingerprint_sha256?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * Additional certificates provided by the server.
         */
        chain?: {
          parsed?: {
            /**
             * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
             */
            fingerprint_sha256?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
         */
        secure_renegotiation?: boolean;
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        session_ticket?: {
          /**
           * The length of the session ticket, in bytes.
           */
          length?: string;
          /**
           * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
           */
          lifetime_hint?: string;
          /**
           * The session ticket (an opaque binary blob).
           */
          value?: string;
          [k: string]: unknown;
        };
        cipher_suite?: {
          /**
           * The hexadecimal string representation of the numeric cipher algorithm identifier.
           */
          id?: string;
          /**
           * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
           */
          name?: string;
          [k: string]: unknown;
        };
        /**
         * A human-readable version of the TLS version.
         */
        version?: string;
        /**
         * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
         */
        ocsp_stapling?: boolean;
        signature?: {
          /**
           * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
           */
          hash_algorithm?: string;
          /**
           * The signature error, if one occurred.
           */
          signature_error?: string;
          valid?: boolean;
          /**
           * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
           */
          signature_algorithm?: string;
          [k: string]: unknown;
        };
        /**
         * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
         */
        scts?: {
          /**
           * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
           */
          log_id?: string;
          /**
           * Time at which the SCT was issued (in seconds since the Unix epoch).
           */
          timestamp?: string;
          /**
           * Version of the protocol to which the SCT conforms.
           */
          version?: string;
          /**
           * For future extensions to the protocol.
           */
          extensions?: string;
          /**
           * The log's signature for this SCT.
           */
          signature?: string;
          [k: string]: unknown;
        };
        validation?: {
          /**
           * Indicates whether the server's domain name matches that in the certificate.
           */
          matches_domain?: boolean;
          /**
           * Indicates whether the certificate is trusted by the standard browser certificate stores.
           */
          browser_trusted?: boolean;
          /**
           * Description of the reason browser_trusted == false.
           */
          browser_error?: string;
          [k: string]: unknown;
        };
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      dhe_export?: {
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        /**
         * True if the host supports export-grade Diffie-Hellman in TLS handshakes.
         */
        support?: boolean;
        /**
         * The parameters for the key.
         */
        dh_params?: {
          /**
           * The shared prime number.
           */
          prime?: {
            /**
             * The length of the parameter.
             */
            length?: string;
            /**
             * The value of the parameter.
             */
            value?: string;
            [k: string]: unknown;
          };
          /**
           * The server's public key.
           */
          server_public?: {
            /**
             * The length of the parameter.
             */
            length?: string;
            /**
             * The value of the parameter.
             */
            value?: string;
            [k: string]: unknown;
          };
          /**
           * The generator of the DH group.
           */
          generator?: {
            /**
             * The length of the parameter.
             */
            length?: string;
            /**
             * The value of the parameter.
             */
            value?: string;
            [k: string]: unknown;
          };
          /**
           * The client's private key. Usually does not coexist with server_private.
           */
          client_private?: {
            /**
             * The length of the parameter.
             */
            length?: string;
            /**
             * The value of the parameter.
             */
            value?: string;
            [k: string]: unknown;
          };
          /**
           * The server's private key. Usually does not coexist with client_private.
           */
          server_private?: {
            /**
             * The length of the parameter.
             */
            length?: string;
            /**
             * The value of the parameter.
             */
            value?: string;
            [k: string]: unknown;
          };
          /**
           * The client's public key.
           */
          client_public?: {
            /**
             * The length of the parameter.
             */
            length?: string;
            /**
             * The value of the parameter.
             */
            value?: string;
            [k: string]: unknown;
          };
          /**
           * The session key.
           */
          session_key?: {
            /**
             * The length of the parameter.
             */
            length?: string;
            /**
             * The value of the parameter.
             */
            value?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      get?: {
        /**
         * The HTTP body, truncated according to configured MaxSize (default 256kb).
         */
        body?: string;
        /**
         * HTTP response headers. Names are normalized by converting them to lowercase and replacing hyphens with underscores. When a header is returned multiple times, only the first is included. Values are truncated to 256 bytes.
         */
        headers?: {
          /**
           * The value of the content_length header.
           */
          content_length?: string;
          /**
           * The value of the x-ua-compatible header.
           */
          x_ua_compatible?: string;
          /**
           * The value of the via header.
           */
          via?: string;
          /**
           * The value of the pragma header.
           */
          pragma?: string;
          /**
           * The value of the set_cookie header.
           */
          set_cookie?: string;
          /**
           * The value of the x-powered-by header.
           */
          x_powered_by?: string;
          /**
           * The value of the vary header.
           */
          vary?: string;
          /**
           * The value of the retry_after header.
           */
          retry_after?: string;
          /**
           * The value of the www-authenticate header.
           */
          www_authenticate?: string;
          /**
           * The value of the warning header.
           */
          warning?: string;
          /**
           * The value of the content_language header.
           */
          content_language?: string;
          /**
           * The value of the content_location header.
           */
          content_location?: string;
          /**
           * The value of the p3p header.
           */
          p3p?: string;
          /**
           * The value of the server header.
           */
          server?: string;
          /**
           * The value of the proxy-authenticate header.
           */
          proxy_authenticate?: string;
          /**
           * The value of the proxy-agent header.
           */
          proxy_agent?: string;
          /**
           * The value of the upgrade header.
           */
          upgrade?: string;
          /**
           * Other headers are included as a list of key, value pairs.
           */
          unknown?: {
            value?: string;
            key?: string;
            [k: string]: unknown;
          };
          /**
           * The value of the x-content-type-options header.
           */
          x_content_type_options?: string;
          /**
           * The value of the x-content-security-policy header.
           */
          x_content_security_policy?: string;
          /**
           * The value of the etag header.
           */
          etag?: string;
          /**
           * The value of the content_range header.
           */
          content_range?: string;
          /**
           * The value of the content_encoding header.
           */
          content_encoding?: string;
          /**
           * The value of the access-control-allow-origin header.
           */
          access_control_allow_origin?: string;
          /**
           * The value of the content_md5 header.
           */
          content_md5?: string;
          /**
           * The value of the content_disposition header.
           */
          content_disposition?: string;
          /**
           * The value of the cache_control header.
           */
          cache_control?: string;
          /**
           * The value of the location header.
           */
          location?: string;
          /**
           * The value of the status header.
           */
          status?: string;
          /**
           * The value of the strict-transport-security header.
           */
          strict_transport_security?: string;
          /**
           * The value of the expires header.
           */
          expires?: string;
          /**
           * The value of the accept-patch header.
           */
          accept_patch?: string;
          /**
           * The value of the last_modified header.
           */
          last_modified?: string;
          /**
           * The value of the link header.
           */
          link?: string;
          /**
           * The value of the content_type header.
           */
          content_type?: string;
          /**
           * The value of the date header.
           */
          date?: string;
          /**
           * The value of the x-frame-options header.
           */
          x_frame_options?: string;
          /**
           * The value of the x-webkit-csp header.
           */
          x_webkit_csp?: string;
          /**
           * The value of the x-real-ip header.
           */
          x_real_ip?: string;
          /**
           * The value of the alternate_protocol header.
           */
          alternate_protocol?: string;
          /**
           * The value of the accept-ranges header.
           */
          accept_ranges?: string;
          /**
           * The value of the age header.
           */
          age?: string;
          /**
           * The value of the x-xss-protection header.
           */
          x_xss_protection?: string;
          /**
           * The value of the x-forwarded-for header.
           */
          x_forwarded_for?: string;
          /**
           * The value of the refresh header.
           */
          refresh?: string;
          /**
           * The value of the public-key-pins header.
           */
          public_key_pins?: string;
          /**
           * The value of the connection header.
           */
          connection?: string;
          /**
           * The value of the x-content-duration header.
           */
          x_content_duration?: string;
          /**
           * The value of the alt-svc header.
           */
          alt_svc?: string;
          /**
           * The value of the allow header.
           */
          allow?: string;
          /**
           * The value of the referer header.
           */
          referer?: string;
          /**
           * The value of the content-security-policy header.
           */
          content_security_policy?: string;
          /**
           * The value of the transfer_encoding header.
           */
          transfer_encoding?: string;
          /**
           * The value of the trailer header.
           */
          trailer?: string;
          [k: string]: unknown;
        };
        /**
         * The HTTP status code (e.g. 200, 404, 503).
         */
        status_code?: string;
        /**
         * The contents of the first TITLE tag in the body (stripped of any surrounding whitespace and truncated to 1024 characters).
         */
        title?: string;
        /**
         * The full status line returned by the server (e.g. "200 OK" or "401 UNAUTHORIZED")
         */
        status_line?: string;
        /**
         * The SHA2-256 digest of the body. NOTE: This digest is calculated using the same data returned in the body field, so if that was truncated, this will be calculated over the truncated body, rather than full data stored on the server.
         */
        body_sha256?: string;
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      dhe?: {
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        /**
         * True if the host supports Diffie-Hellman in TLS handshakes.
         */
        support?: boolean;
        /**
         * The parameters for the key.
         */
        dh_params?: {
          /**
           * The shared prime number.
           */
          prime?: {
            /**
             * The length of the parameter.
             */
            length?: string;
            /**
             * The value of the parameter.
             */
            value?: string;
            [k: string]: unknown;
          };
          /**
           * The server's public key.
           */
          server_public?: {
            /**
             * The length of the parameter.
             */
            length?: string;
            /**
             * The value of the parameter.
             */
            value?: string;
            [k: string]: unknown;
          };
          /**
           * The generator of the DH group.
           */
          generator?: {
            /**
             * The length of the parameter.
             */
            length?: string;
            /**
             * The value of the parameter.
             */
            value?: string;
            [k: string]: unknown;
          };
          /**
           * The client's private key. Usually does not coexist with server_private.
           */
          client_private?: {
            /**
             * The length of the parameter.
             */
            length?: string;
            /**
             * The value of the parameter.
             */
            value?: string;
            [k: string]: unknown;
          };
          /**
           * The server's private key. Usually does not coexist with client_private.
           */
          server_private?: {
            /**
             * The length of the parameter.
             */
            length?: string;
            /**
             * The value of the parameter.
             */
            value?: string;
            [k: string]: unknown;
          };
          /**
           * The client's public key.
           */
          client_public?: {
            /**
             * The length of the parameter.
             */
            length?: string;
            /**
             * The value of the parameter.
             */
            value?: string;
            [k: string]: unknown;
          };
          /**
           * The session key.
           */
          session_key?: {
            /**
             * The length of the parameter.
             */
            length?: string;
            /**
             * The value of the parameter.
             */
            value?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      tls_1_2?: {
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        support?: boolean;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      ssl_3?: {
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        support?: boolean;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      heartbleed?: {
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        /**
         * The server response to the Heartbeat extension
         */
        heartbeat_enabled?: boolean;
        /**
         * Indicates if the server is vulnerable to the Heartbleed attack.
         */
        heartbleed_vulnerable?: boolean;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      rsa_export?: {
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        /**
         * True if the host supports export-grade RSA in TLS handshakes.
         */
        support?: boolean;
        /**
         * The parameters for the key.
         */
        rsa_params?: {
          /**
           * Bit-length of modulus.
           */
          length?: string;
          /**
           * The RSA key's modulus (n) in big-endian encoding.
           */
          modulus?: string;
          /**
           * The RSA key's public exponent (e).
           */
          exponent?: string;
          [k: string]: unknown;
        };
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      ecdhe?: {
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        /**
         * The parameters for the key.
         */
        ecdh_params?: {
          /**
           * An elliptic curve point.
           */
          server_public?: {
            /**
             * Generic parameter for a cryptographic algorithm.
             */
            y?: {
              /**
               * The length of the parameter.
               */
              length?: string;
              /**
               * The value of the parameter.
               */
              value?: string;
              [k: string]: unknown;
            };
            /**
             * Generic parameter for a cryptographic algorithm.
             */
            x?: {
              /**
               * The length of the parameter.
               */
              length?: string;
              /**
               * The value of the parameter.
               */
              value?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * An elliptic curve algorithm identifier.
           */
          curve_id?: {
            /**
             * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
             */
            id?: string;
            /**
             * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * TLS key exchange parameters for ECDH keys.
           */
          server_private?: {
            length?: string;
            value?: string;
            [k: string]: unknown;
          };
          /**
           * An elliptic curve point.
           */
          client_public?: {
            /**
             * Generic parameter for a cryptographic algorithm.
             */
            y?: {
              /**
               * The length of the parameter.
               */
              length?: string;
              /**
               * The value of the parameter.
               */
              value?: string;
              [k: string]: unknown;
            };
            /**
             * Generic parameter for a cryptographic algorithm.
             */
            x?: {
              /**
               * The length of the parameter.
               */
              length?: string;
              /**
               * The value of the parameter.
               */
              value?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * TLS key exchange parameters for ECDH keys.
           */
          client_private?: {
            length?: string;
            value?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * True if the host supports ECDH in TLS handshakes.
         */
        support?: boolean;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      tls_1_1?: {
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        support?: boolean;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p9090?: {
    prometheus?: {
      banner?: {
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          certificate?: {
            fingerprints?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's SubjectPublicKeyInfo, as a hexadecimal string.
               */
              spki_subject?: string;
              /**
               * The SHA1 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha1?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, as a hexadecimal string.
               */
              tbs?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, *with any CT extensions omitted*, as a hexadecimal string.
               */
              tbs_noct?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha256?: string;
              /**
               * The MD5 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              md5?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          chain?: {
            fingerprints?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's SubjectPublicKeyInfo, as a hexadecimal string.
               */
              spki_subject?: string;
              /**
               * The SHA1 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha1?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, as a hexadecimal string.
               */
              tbs?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, *with any CT extensions omitted*, as a hexadecimal string.
               */
              tbs_noct?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha256?: string;
              /**
               * The MD5 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              md5?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * List of all errors encountered during scan.
         */
        errors?: string;
        /**
         * If true, Prometheus was detected on this machine.
         */
        supported?: boolean;
        http_info?: {
          headers?: {
            content_length?: string;
            x_ua_compatible?: string;
            via?: string;
            pragma?: string;
            set_cookie?: string;
            x_powered_by?: string;
            vary?: string;
            retry_after?: string;
            warning?: string;
            content_language?: string;
            content_location?: string;
            p3p?: string;
            server?: string;
            proxy_authenticate?: string;
            proxy_agent?: string;
            upgrade?: string;
            unknown?: {
              value?: string;
              key?: string;
              [k: string]: unknown;
            };
            x_content_type_options?: string;
            x_content_security_policy?: string;
            www_authenticate?: string;
            content_range?: string;
            content_encoding?: string;
            access_control_allow_origin?: string;
            content_md5?: string;
            content_disposition?: string;
            cache_control?: string;
            location?: string;
            status?: string;
            strict_transport_security?: string;
            expires?: string;
            accept_patch?: string;
            last_modified?: string;
            link?: string;
            content_type?: string;
            date?: string;
            x_frame_options?: string;
            x_webkit_csp?: string;
            x_real_ip?: string;
            alternate_protocol?: string;
            accept_ranges?: string;
            age?: string;
            x_xss_protection?: string;
            x_forwarded_for?: string;
            refresh?: string;
            public_key_pins?: string;
            connection?: string;
            x_content_duration?: string;
            alt_svc?: string;
            allow?: string;
            referer?: string;
            content_security_policy?: string;
            transfer_encoding?: string;
            trailer?: string;
            [k: string]: unknown;
          };
          /**
           * Status message received from hitting /api/v1/targets
           */
          status_line?: string;
          /**
           * Status code received from hitting /api/v1/targets
           */
          status_code?: string;
          [k: string]: unknown;
        };
        /**
         * Information Prometheus captured as well as build information.
         */
        response?: {
          /**
           * List of the versions and revisions of Prometheus.
           */
          prometheus_build_info?: {
            /**
             * Version of Prometheus.
             */
            version?: string;
            /**
             * Version of Go used to build Prometheus.
             */
            go_version?: string;
            /**
             * Revision of Prometheus.
             */
            revision?: string;
            [k: string]: unknown;
          };
          /**
           * List of dropped targets.
           */
          dropped_targets?: {
            discovered_labels?: {
              /**
               * URL scheme.
               */
              scheme?: string;
              /**
               * Job of target.
               */
              job?: string;
              /**
               * Path to metrics of target.
               */
              metrics_path?: string;
              /**
               * Address of target.
               */
              address?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * List of the versions of everything that Prometheus finds (i.e., version of Prometheus, Go, Node, cAdvisor, etc.)
           */
          all_versions?: string;
          /**
           * List of the versions of Go.
           */
          go_versions?: string;
          /**
           * List of active targets.
           */
          active_targets?: {
            discovered_labels?: {
              /**
               * URL scheme.
               */
              scheme?: string;
              /**
               * Job of target.
               */
              job?: string;
              /**
               * Path to metrics of target.
               */
              metrics_path?: string;
              /**
               * Address of target.
               */
              address?: string;
              [k: string]: unknown;
            };
            labels?: {
              /**
               * Instance after relabelling has occurred
               */
              instance?: string;
              /**
               * Job of target after relabelling has occurred
               */
              job?: string;
              [k: string]: unknown;
            };
            /**
             * URL that Prometheus scraped.
             */
            scrape_url?: string;
            /**
             * Whether target is up or down.
             */
            health?: string;
            /**
             * Last error that occurred within target.
             */
            last_error?: string;
            /**
             * Last time Prometheus scraped target.
             */
            last_scrape?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  p465?: {
    smtp?: {
      tls?: {
        /**
         * The response to the EHLO command.
         */
        ehlo?: string;
        tls?: {
          /**
           * The key data sent by the server in the TLS key exchange message.
           */
          server_key_exchange?: {
            /**
             * Parameters for the Diffie-Hellman key exchange.
             */
            dh_params?: {
              /**
               * The shared prime number.
               */
              prime?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's public key.
               */
              server_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The generator of the DH group.
               */
              generator?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's private key. Usually does not coexist with server_private.
               */
              client_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The server's private key. Usually does not coexist with client_private.
               */
              server_private?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The client's public key.
               */
              client_public?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              /**
               * The session key.
               */
              session_key?: {
                /**
                 * The length of the parameter.
                 */
                length?: string;
                /**
                 * The value of the parameter.
                 */
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Container for the public portion (modulus and exponent) of an RSA asymmetric key.
             */
            rsa_params?: {
              /**
               * Bit-length of modulus.
               */
              length?: string;
              /**
               * The RSA key's modulus (n) in big-endian encoding.
               */
              modulus?: string;
              /**
               * The RSA key's public exponent (e).
               */
              exponent?: string;
              [k: string]: unknown;
            };
            signature?: {
              raw?: string;
              tls_version?: {
                /**
                 * A human-readable version of the TLS version.
                 */
                name?: string;
                /**
                 * The TLS version identifier.
                 */
                value?: string;
                [k: string]: unknown;
              };
              valid?: boolean;
              type?: string;
              /**
               * mirrors the TLS 1.2, SignatureAndHashAlgorithm struct. See RFC 5246, section A.4.1.
               */
              signature_and_hash_type?: {
                /**
                 * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                hash_algorithm?: string;
                /**
                 * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
                 */
                signature_algorithm?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * Parameters for ECDH key exchange.
             */
            ecdh_params?: {
              /**
               * An elliptic curve point.
               */
              server_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * An elliptic curve algorithm identifier.
               */
              curve_id?: {
                /**
                 * The numeric value of the curve identifier. See http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-8
                 */
                id?: string;
                /**
                 * The name of the curve algorithm (e.g. sect163kr1, secp192r1). Unrecognized curves are 'unknown'.
                 */
                name?: string;
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              server_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              /**
               * An elliptic curve point.
               */
              client_public?: {
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                y?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                /**
                 * Generic parameter for a cryptographic algorithm.
                 */
                x?: {
                  /**
                   * The length of the parameter.
                   */
                  length?: string;
                  /**
                   * The value of the parameter.
                   */
                  value?: string;
                  [k: string]: unknown;
                };
                [k: string]: unknown;
              };
              /**
               * TLS key exchange parameters for ECDH keys.
               */
              client_private?: {
                length?: string;
                value?: string;
                [k: string]: unknown;
              };
              [k: string]: unknown;
            };
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            /**
             * The digest that is signed.
             */
            digest?: string;
            [k: string]: unknown;
          };
          /**
           * The server's TLS certificate.
           */
          certificate?: {
            parsed?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              fingerprint_sha256?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          chain?: {
            fingerprints?: {
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's SubjectPublicKeyInfo, as a hexadecimal string.
               */
              spki_subject?: string;
              /**
               * The SHA1 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha1?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, as a hexadecimal string.
               */
              tbs?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate's TBSCertificate, *with any CT extensions omitted*, as a hexadecimal string.
               */
              tbs_noct?: string;
              /**
               * The SHA2-256 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              sha256?: string;
              /**
               * The MD5 digest over the DER encoding of the certificate, as a hexadecimal string.
               */
              md5?: string;
              [k: string]: unknown;
            };
            [k: string]: unknown;
          };
          /**
           * This is true if the client has the Secure Renegotiation extension (see https://tools.ietf.org/html/rfc5746).
           */
          secure_renegotiation?: boolean;
          /**
           * Time the scan was run.
           */
          timestamp?: string;
          session_ticket?: {
            /**
             * The length of the session ticket, in bytes.
             */
            length?: string;
            /**
             * A hint from the server as to how long the ticket should be stored (in seconds relative to when the ticket is received).
             */
            lifetime_hint?: string;
            /**
             * The session ticket (an opaque binary blob).
             */
            value?: string;
            [k: string]: unknown;
          };
          cipher_suite?: {
            /**
             * The hexadecimal string representation of the numeric cipher algorithm identifier.
             */
            id?: string;
            /**
             * The algorithm identifier for the cipher algorithm identifier, see e.g. https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.
             */
            name?: string;
            [k: string]: unknown;
          };
          /**
           * A human-readable version of the TLS version.
           */
          version?: string;
          /**
           * This is true if the OCSP Stapling extension is set (see https://www.ietf.org/rfc/rfc6961.txt for details).
           */
          ocsp_stapling?: boolean;
          signature?: {
            /**
             * The name of the hash algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            hash_algorithm?: string;
            /**
             * The signature error, if one occurred.
             */
            signature_error?: string;
            valid?: boolean;
            /**
             * The name of the signature algorithm, as defined in RFC5246 section 7.4.1.4.1. Unrecognized values are of the form 'unknown.255'.
             */
            signature_algorithm?: string;
            [k: string]: unknown;
          };
          /**
           * The values in the SignedCertificateTimestampList of the Signed Certificate Timestamp, if present.
           */
          scts?: {
            /**
             * The SHA-256 hash of the log's public key, calculated over the DER encoding of the key's SubjectPublicKeyInfo.
             */
            log_id?: string;
            /**
             * Time at which the SCT was issued (in seconds since the Unix epoch).
             */
            timestamp?: string;
            /**
             * Version of the protocol to which the SCT conforms.
             */
            version?: string;
            /**
             * For future extensions to the protocol.
             */
            extensions?: string;
            /**
             * The log's signature for this SCT.
             */
            signature?: string;
            [k: string]: unknown;
          };
          validation?: {
            /**
             * Indicates whether the server's domain name matches that in the certificate.
             */
            matches_domain?: boolean;
            /**
             * Indicates whether the certificate is trusted by the standard browser certificate stores.
             */
            browser_trusted?: boolean;
            /**
             * Description of the reason browser_trusted == false.
             */
            browser_error?: string;
            [k: string]: unknown;
          };
          metadata?: {
            product?: string;
            revision?: string;
            description?: string;
            version?: string;
            manufacturer?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        };
        /**
         * The response to the STARTTLS command.
         */
        starttls?: string;
        /**
         * Time the scan was run.
         */
        timestamp?: string;
        /**
         * The initial SMTP command sent by the server (e.g. "220 localhost.localdomain ESMTP Postfix (Ubuntu)\r\n"
         */
        banner?: string;
        metadata?: {
          product?: string;
          revision?: string;
          description?: string;
          version?: string;
          manufacturer?: string;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
