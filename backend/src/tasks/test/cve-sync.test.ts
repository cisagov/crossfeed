import * as nock from 'nock';
import { connectToDatabase, Cve, Cpe, Scan } from '../../models';
import { handler as cveSync } from '../cve-sync';

const taskResponse = {
  task_id: '6c84fb90-12c4-11e1-840d-7b25c5ee775a',
  status: 'Processing'
};
const dataResponse = {
  task_id: '6c84fb90-12c4-11e1-840d-7b25c5ee775a',
  status: 'Completed',
  result: {
    total_pages: 1,
    current_page: 1,
    data: [
      {
        cve_uid: 'CVE-0000-0000',
        cve_name: 'CVE-0000-0000',
        published_date: '2019-01-01T00:00:00.000Z',
        last_modified_date: '2019-01-01T00:00:00.000Z',
        vuln_status: 'Published',
        description: 'test',
        cvss_v2_source: 'NVD',
        cvss_v2_type: 'CVSSv2',
        cvss_v2_version: '2.0',
        cvss_v2_vector_string: 'AV:N/AC:L/Au:N/C:P/I:P/A:P',
        cvss_v2_base_score: 7.5,
        cvss_v2_base_severity: 'High',
        cvss_v2_exploitability_score: 10,
        cvss_v2_impact_score: 6.4,
        cvss_v3_source: 'NVD',
        cvss_v3_type: 'CVSSv3',
        cvss_v3_version: '3.0',
        cvss_v3_vector_string: 'CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',
        cvss_v3_base_score: 9.8,
        cvss_v3_base_severity: 'Critical',
        cvss_v3_exploitability_score: 3.9,
        cvss_v3_impact_score: 5.9,
        cvss_v4_source: 'NVD',
        cvss_v4_type: 'CVSSv4',
        cvss_v4_version: '4.0',
        cvss_v4_vector_string: 'CVSS:4.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',
        cvss_v4_base_score: 9.8,
        cvss_v4_base_severity: 'Critical',
        cvss_v4_exploitability_score: 3.9,
        cvss_v4_impact_score: 5.9,
        weaknesses: [],
        reference_urls: [],
        cpe_list: ['cpe:/o:test:test'],
        vender_product: {
          company: [
            {
              cpe_product_name: 'test_os',
              version_number: '1.0',
              vender: 'testCompany'
            }
          ]
        }
      }
    ]
  }
};
describe('cve-sync', () => {
  let scan;
  let connection;
  beforeEach(async () => {
    connection = await connectToDatabase();
    scan = await Scan.create({
      name: 'cve-sync',
      arguments: {},
      frequency: 999
    }).save();
  });
  afterEach(async () => {
    await connection.close();
  });
  afterAll(async () => {
    nock.cleanAll();
  });
  const checkCVE = async (cveName: string): Promise<string> => {
    const cve = await Cve.findOne({
      where: { name: cveName }
    });
    expect(cve);
    expect(cve?.name).toEqual(cveName);
    const id = cve?.id || '';
    expect(id).not.toEqual('');
    return id;
  };
  const checkCPE = async (cpeName: string): Promise<string> => {
    const cpe = await Cpe.findOne({
      where: { name: cpeName }
    });
    expect(cpe?.vendor).toEqual('testCompany');
    const id = cpe?.id || '';
    expect(id).not.toEqual('');
    return id;
  };

  test('baseline', async () => {
    nock('https://api.staging-cd.crossfeed.cyber.dhs.gov') //TODO: add pe link
      .get(
        '/pe/apiv1/cves_by_modified_date/task/6c84fb90-12c4-11e1-840d-7b25c5ee775a'
      )
      .reply(200, dataResponse)
      .post('/pe/apiv1/cves_by_modified_date')
      .reply(200, taskResponse);
    await cveSync({
      organizationId: 'GLOBAL SCAN',
      organizationName: 'organizationName',
      scanId: scan.id,
      scanName: 'scanName',
      scanTaskId: 'scanTaskId'
    });
    await checkCVE('CVE-0000-0000');
    await checkCPE('test_os');
  });
});
